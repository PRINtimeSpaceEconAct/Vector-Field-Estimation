length(unlist(purrr::map(1:nEval, ~ solve_trH(.x))))
partialTraceHLL <- sum( unlist(purrr::map(1:nEval, ~ solve_trH(.x))) )
partialTraceHLL
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 10
nEval = 25
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
debugSource("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/localLinear.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
trH
trH = partialTraceHLL
partialTraceHLL
dim(partialTraceHLL)
length(partialTraceHLL)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
debugSource("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
partialTraceHLL
distances
dim(distances)
legnth(distances)
length(distances)
distances
length(distances$z1)
dim(distances$z1)
h
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/utils.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
h
partialTraceHLL
unlist(purrr::map(1:nEval, ~ solve_trH(.x)))
partialTraceHLL <- sum( unlist(purrr::map(1:nEval, ~ solve_trH(.x)),na.rm=T) )
?sum,
?sum
partialTraceHLL <- sum( unlist(purrr::map(1:nEval, ~ solve_trH(.x))) ,na.rm=T)
partialTraceHLL
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/localLinear.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/utils.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=10000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
sum(c(1))
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/localLinear.R", echo=TRUE)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
debugSource("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
LLoutputs$partialTraceHLL
chunk
debugSource("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
LLoutputs$partialTraceHLL
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.05*diag(2))
# compute min and max distance between points
# get distances component wise
#distances = computeDcomponents(X0, X0)
#distance_matrix = sqrt(mahalanobis(distances$z1, distances$z2, A = diag(2), 1))
# print the non zero minimum and maximum distance
#print(min(distance_matrix[distance_matrix > 0]))
#print(max(distance_matrix[distance_matrix > 0]))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*%  matrix(c(0.01,0.005,0.005,0.02),nrow=2) * 10
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
VFx = t(apply(x, 1, VF))
# stima ----
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=1000,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
debugSource("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
est_field_LL_opt = LLfield(X0, X1, x=X0 , kernel.type="gauss", method.h = NULL,
chunk_size=500,
sparse=FALSE, gc=TRUE, hOpt = TRUE, h = NULL, nGridh = 10)
partialTraceHLL
partialTraceHLL[i] = LLoutputs$partialTraceHLL
partialTraceHLL
i
partialTraceHLL[i] = LLoutputs$partialTraceHLL
v
partialTraceHLL
