chattr:::chattr_app()
x = rnorm(100)
y = 0.5*x+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
library(ggplot2)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
y = 0.5*x-0.2*x^2+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x,y=y),aes(x=x,y=y)) + geom_point() + geom_smooth(method="lm",se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=TRUE)
# draw the plot with regression parabola using ggplot2
# draw the plot with regression parabola using ggplot2
library(ggplot2)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=FALSE)
# with confidence bands
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=TRUE)
chattr:::chattr_app()
detach("package:terra", unload = TRUE)
detach("package:geodata", unload = TRUE)
vkldsjaf
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE)
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 1, 0.01)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
TRUE || FALSE
TRUE || TRUE
TRUE & FALSE
# perform linear regression of a parbola
# generate points and do the regression in R
X = rnorm(100)
Y = 2*X^2 + rnorm(100)
# do the regression
fit = lm(Y~X+I(X^2))
# plot using ggplot
library(ggplot2)
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=FALSE) + theme_minimal()
# add confidence bands
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=TRUE) + theme_minimal()
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
# xGrid = seq(from=min(c(X0[,1],X1[,1])), to=max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
# yGrid = seq(from=min(c(X0[,2],X1[,2])), to=max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
# est = est_field_adaptive
t = Sys.time() - t0
# plot ----
## plot campo vero ----
# dev.new()
# op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
# VFx = t(apply(x, 1, VF))
# plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
# arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="blue",length=0.05)
# abline(h=0)
# abline(v=0)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
# par(op)
## plot campo stimato ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
points(X0)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# plot ----
## plot campo vero ----
# dev.new()
# op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
# VFx = t(apply(x, 1, VF))
# plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
# arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="blue",length=0.05)
# abline(h=0)
# abline(v=0)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
# par(op)
## plot campo stimato ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
points(X0)
par(op)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# plot ----
## plot campo vero ----
# dev.new()
# op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
# VFx = t(apply(x, 1, VF))
# plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
# arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="blue",length=0.05)
# abline(h=0)
# abline(v=0)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
# par(op)
## plot campo stimato ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
points(X0)
?cond
?solve
.Machine$double.eps
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# plot ----
## plot campo vero ----
# dev.new()
# op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
# VFx = t(apply(x, 1, VF))
# plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
# arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="blue",length=0.05)
# abline(h=0)
# abline(v=0)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
# par(op)
## plot campo stimato ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
points(X0)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
# plot ----
## plot campo vero ----
# dev.new()
# op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
# VFx = t(apply(x, 1, VF))
# plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
# arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="blue",length=0.05)
# abline(h=0)
# abline(v=0)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
# par(op)
## plot campo stimato ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
points(X0)
