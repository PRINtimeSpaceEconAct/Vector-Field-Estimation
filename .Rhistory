?sf
sf(grid_nb)
library(sf)
?nb2lines()
nb2lines(grid_nb)
nb2lines(grid_nb,coords=coord)
spLines = nb2lines(grid_nb,coords=coor)
spLines = nb2lines(grid_nb,coords=coord)
plot(spLines)
dev.copy2pdf(file="angelaPuppa.pdf")
grid_nb
grid_nb = cell2nb(nrow = N, ncol=N, torus = FALSE, type="queen", x=grid)
## level of lags ----
All_nb = nblag(grid_nb,3)
### contiguity 1 ----
W = as(nb2mat(All_nb[[1]],style="W"),"sparseMatrix")
eps = rnorm(N*N)
rho = 0.5
Mat = as(diag(N*N) - rho*W,"sparseMatrix")
Y = solve(Mat,eps)
spLines = nb2lines(grid_nb,coords=coord)
plot(spLines)
?plot.SpatialGrid
spLines
spLines$wt
spLines$wt <- Y
length(spLines$wt)
spLines
devtools::install_github("amvallone/estdaR")
install.packages(gasfluxes)
install.packages("gasfluxes")
install.packages(etm)
install.packages("etm")
library(etmÃ¨)
library(etm)
?bdiag
?pnorm
devtools::install_github("amvallone/estdaR")
install.packages("gasfluxes")
version()
version()
devtools::install_github("amvallone/estdaR")
install.packages("devtools")
devtools::install_github("amvallone/estdaR")
library(estdaR)
?estdaR
??estdaR
??estdR
?estdaR::d.LISA()
coefs = c(0.0456 ,0.0357 ,0.0138 ,0.0105 ,0.0055 ,-0.0003,0.0052 ,0.0029 ,0.0008 ,-0.0002,0.0011 ,0.0027 ,0.0025 ,-0.0003,-0.0001,0.0026 ,0.0013 ,0.0009 ,0.0009 )
coefs
coefs
coefs[1:8]
coefs = coefs[1:8]
plot(coefs)
plot(coefs,type="l")
plot(log(coefs),type="l")
coefs = c(0.0456 ,0.0357 ,0.0138 ,0.0105 ,0.0055 ,-0.0003,0.0052 ,0.0029 ,0.0008 ,-0.0002,0.0011 ,0.0027 ,0.0025 ,-0.0003,-0.0001,0.0026 ,0.0013 ,0.0009 ,0.0009 )
plot(coefs,type="l")
plot(coefs,type="b")
library(sm)
sm.regression(coef())
sm.regression(coefs)
sm.regression(1:19,coefs)
est = sm.regression(1:19,coefs)
plot(est$eval.points,log(est$estimate),type="l")
grid()
est$eval.points
est$eval.points[26]
est$eval.points[25]
(est$estimate[26]-est$estimate[1])/10
exp((est$estimate[26]-est$estimate[1])/10)
kmArLago = 280
kmLagoCampo = 50
kmCampoRoseto = 100
kmRosetoAr = 300
kmTot = kmArLago + kmLagoCampo + kmCampoRoseto + kmRosetoAr
kmTot
Ltot = kmTot / 100 * Lper100Km
Lper100Km = 5.3
Ltot = kmTot / 100 * Lper100Km
Ltot
PrezzoTotKm = PrezzoL * Ltot
PrezzoL = 1.75
PrezzoTotKm = PrezzoL * Ltot
PrezzoTotKm
kmPisaMo = 166
kmTot3 = 2 * kmPisaMo
Ltot3 = kmTot3 / 100 * Lper100Km
PrezzTotkm3 = PrezzoL * Ltot3
PrezzTotkm3
AutoArLago = 10
AutoCampoRoseto = 4.30
AutoRosetoAr = 6.40
AutoTot = AutoArLago + AutoCampoRoseto + AutoRosetoAr
AutoTot
## autostrada solo noi 3 ----
AutoPisaAr = 5.40
AutoTot3 = 2 * AutoPisaAr
AutoTot3
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
?unlist
list(1,2,3)
unlist(list(1,2,3))
unlist(list(c(1,1),2,3))
?barplot
?errorbar
??errorbar
plot(1,2)
errorbar(1,2,xErr = 0, yErr = 0.5)
library(pracma)
errorbar(1,2,xErr = 0, yErr = 0.5)
errorbar(1,2,xErr = 1, yErr = 0.5)
x <- seq(0, 2*pi, length.out = 20)
y <- sin(x)
xe <- 0.1
ye <- 0.1 * y
errorbar(x, y, xe, ye, type = "l", with = FALSE)
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
library(spdep)
# Clearing the workspace
rm(list = ls())
# Loading required libraries
library(dplyr)
library(sf)
library(terra)
library(tmap)
library(blackmarbler)
library(raster)
library(exactextractr)
library(lubridate)
library(geodata)
library(readxl)
shp_ROI = gadm(country = "USA", level=0, path = tempdir())
shp_ROI
area(shp_ROI)
cellsize(shp_ROI)
cellSize(shp_ROI)
area(shp_ROI)
?area
terra::area(shp_ROI)
areas <- expanse(shp_ROI, unit="km")
areas
shp_ROI = gadm(country = "USA", level=2, path = tempdir()) %>% st_as_sf()
shp_ROI = gadm(country = "USA", level=2, path = tempdir())
areas <- expanse(shp_ROI, unit="km")
areas
sum(areas)
x = seq(from = -10, to = 10, length.out = 10000)
f <- function(x) return(exp(-x^(1.1)))
f(1)
plot(x,f(x))
f <- function(x) return(exp(-abs(x)^(1.1)))
plot(x,f(x))
plot(x,f(x),type="l")
fPrime <- function(x) return(-abs(x)^(0.1)*exp(abs(x)^(1.1)))
lines(x,fPrime(x),col="red")
fPrime <- function(x) return(-abs(x)^(0.1)*exp(abs(x)^(1.1)))
lines(x,fPrime(x),col="red")
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
library(ggplot2)
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
x = runif(10)
y = runif(10)
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
p
# plot x vs y using ggplot2 connecting with lines
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_line()
p
# now add uniform shading around the line
p + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
# add also x marker in the points
p + geom_point() + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
# make the markers asterisks
p + geom_point(shape = 8) + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
\clear
install.packages("chattr")
# Run the app
chattr::chattr_app()
chattr::chattr_app()
chattr::chattr_app()
install.packages("chattr")
# Run the app
chattr::chattr_app()
chattr::chattr_use("copilot")
chattr:::chattr_app()
chattr:::chattr_app()
set.seed(123)
x <- rnorm(100)
y <- rnorm(100)
# now plot
library(ggplot2)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point()
chattr:::chattr_app()
# now let's add a line to the plot
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_abline(intercept=0, slope=1, color="red")
chattr:::chattr_app()
chattr:::chattr_app()
chattr:::chattr_app()
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
= 1.5*x + rnorm(100)
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
= 1.5*x + rnorm(100)
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
z = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
y = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
z = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = z)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
data %>%
ggplot(aes(x = x, y = z)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
chattr:::chattr_app()
x = rnorm(100)
y = 0.5*x+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
library(ggplot2)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
y = 0.5*x-0.2*x^2+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x,y=y),aes(x=x,y=y)) + geom_point() + geom_smooth(method="lm",se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=TRUE)
# draw the plot with regression parabola using ggplot2
# draw the plot with regression parabola using ggplot2
library(ggplot2)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=FALSE)
# with confidence bands
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=TRUE)
chattr:::chattr_app()
detach("package:terra", unload = TRUE)
detach("package:geodata", unload = TRUE)
vkldsjaf
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE)
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 1, 0.01)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
TRUE || FALSE
TRUE || TRUE
TRUE & FALSE
# perform linear regression of a parbola
# generate points and do the regression in R
X = rnorm(100)
Y = 2*X^2 + rnorm(100)
# do the regression
fit = lm(Y~X+I(X^2))
# plot using ggplot
library(ggplot2)
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=FALSE) + theme_minimal()
# add confidence bands
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=TRUE) + theme_minimal()
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
data = data %>% mutate(GDP.t0 = log(GDP.t0), GDP.t1 = log(GDP.t1))
X0 = cbind(as.numeric(data$GDP.t0),as.numeric(data$LE.t0))
X1 = cbind(as.numeric(data$GDP.t1),as.numeric(data$LE.t1))
# data = dataset.GDP.LE.REL
# X0 = cbind(as.numeric(data$GDP.REL.t0),as.numeric(data$LE.REL.t0))
# X1 = cbind(as.numeric(data$GDP.REL.t1),as.numeric(data$LE.REL.t1))
# draw transitions as they are ----
dev.new()
dataFirst = filter(data,Year.ini == min(data$Year.ini))
plot(dataFirst$GDP.t0,dataFirst$LE.t0, type = "n", xlab = "GDP per capita (PPP in million 2017 USD)", ylab = "Life expectancy at birth", main = "",xlim=range(dataFirst$GDP.t0,dataFirst$GDP.t1),ylim=range(dataFirst$LE.t0,dataFirst$LE.t1))
arrows(dataFirst$GDP.t0,dataFirst$LE.t0, dataFirst$GDP.t1,dataFirst$LE.t1, length = 0.15, angle = 15, col = "black")
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black",cex=0.5)
points(dataFirst$GDP.t1,dataFirst$LE.t1,pch=19,col="red",cex=0.5)
grid()
dev.copy2pdf(file="scatterArrowsPreston19601965.pdf")
# parameters ----
nEval = 2500
# eval points
# xGrid = seq(from=-20000, to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
# yGrid = seq(from=0.9*min(c(X0[,2],X1[,2])), to=1.2*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
# x = as.matrix(expand.grid(xGrid, yGrid))
xGrid = seq(from=0.9*min(c(X0[,1],X1[,1])), to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0.9*min(c(X0[,2],X1[,2])), to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima
# est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
# chunk_size=1000,
# sparse=FALSE, gc=TRUE)
est_field = NWfield(X0, X1, x=x, kernel.type="epa",h=1.0,
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# plots ----
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
firstYear = min(data$Year.ini)
dataLatest = filter(data,Year.end == latestYear)
dataFirst = filter(data,Year.ini == firstYear)
dev.new()
# campo
signifVFest = significanceVF(est_field,X0,X1)
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*signifVFest$signif*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*signifVFest$signif*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black",cex=0.5)
# text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red",cex=0.5)
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode,cex=1,pos=4,col="red")
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=4)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=4)
# forecast delle obs
speedFactor = 0.1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19,cex=0.5)
estForecastObs = sm.regression(forecastObs[,1,nPeriods],forecastObs[,2,nPeriods],display="none")
lines(estForecastObs$eval.points,estForecastObs$estimate,col="purple",lwd=4)
# forecast della est
forecastEst = forecastDiscrete(cbind(estFirst$eval.points,estFirst$estimate), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
lines(forecastEst[,1,nPeriods],forecastEst[,2,nPeriods],col="green",lwd=4)
legend("bottomright",legend=c("1960","2015","Forecasted Observed","Forecasted Estimated"),
col=c("black","red","purple","green"),pch=c(19,19,19,19),lwd=c(4,4,4,4),bg="white")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
# parameters ----
nObs = 10000
nEval = 2500
# data Generation ----
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
VF <- function(X){
# X = (x,y)
# U(X) = x^4 - x^2 + y^2
# VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
return( -0.01*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
}
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
# M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
# VF <- function(X){
#     # X = (x,y), theta = pi/4
#     return (M %*% X)
# }
# apply VF
X1 = X0 + t(apply(X0, 1, VF))
# eval points
xGrid = seq(from=min(c(X0[,1],X1[,1])), to=max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(c(X0[,2],X1[,2])), to=max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
# est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5)
est = est_field_adaptive
t = Sys.time() - t0
# plot ----
## plot campo vero ----
# dev.new()
VFx = t(apply(x, 1, VF))
plot(x, type = "n", xlab = "X1", ylab = "X2", main = "")
arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="black",length=0.05)
points(X0, col="red", pch=19,cex=0.01)
# dev.copy2pdf(file="testPics/doubleWellcampoVero.pdf")
## plot campo stimato ----
dev.new()
signifVFest = significanceVF(est_field_adaptive,X0,X1)
plot(est_field_adaptive$x, type = "n", xlab = "X1", ylab = "X2", main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + signifVFest$signif*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + signifVFest$signif*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
points(X0, col="red", pch=19,cex=0.01)
# dev.copy2pdf(file="testPics/doubleWellcampoStimato.pdf")
