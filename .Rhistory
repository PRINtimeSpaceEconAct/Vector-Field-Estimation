y = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
fig_scatter <- plot_ly(
x = x,
y = x,
z = z,
type = "scatter3d",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
x
dim(x)
x
class(x)
x
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
fig_scatter <- plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "scatter3d",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
fig_scatter <- plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "surface",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "surface",
)
plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "mesh3d"
)
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
X = matrix(nrow=nObs,rnorm(2*nObs))
# nEval = 2500
# x = matrix(nrow=nEval,runif(2*nEval))
# D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=FALSE)
# M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
# s = epaKernel(M)
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "contour")
est = densityEst2d(X,kernel = "gauss",nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "contour")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
sm.density()
?sm.density()
est.sm = sm.density(X)
est.sm$h
bw.nrd(X)
bw.nrd0(X)
sm.density()
?sm.density()
edit(sm.densty)
edit(sm.density)
?h.select()
h.select(X)
bw.nrd0(t(X))
bw.nrd0(X)
edit(sm.density)
edit(sm.density.2d)
sm.density.2d
sm::sm.density.2d
edit(sm.density.2d)
1.77*nrow(x)^(-1/6)
1.77*nrow(X)^(-1/6)
bw.nrd0(X)
?bw.nrd0
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,kernel = "gauss", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est = densityEst2d(X,kernel = "botev", nEval=2500,gc=TRUE)
est = densityEst2d(X,kernel = "gauss", method.h = "botev", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
botev
est = densityEst2d(X,kernel = "gauss", method.h = "botev", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est = densityEst2d(X,kernel = "gauss", method.h = "sj", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=0.1)
?sm.densitty
?sm.density
est.sm = sm.density(X,h=c(0.1,0.1)
est.sm = sm.density(X,h=c(0.1,0.1))
est = densityEst2d(X,kernel = "gauss", h = 0.1, nEval=2500,gc=TRUE)
NULL == "silverman"
0+(NULL == "silverman")
1+(NULL == "silverman")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,kernel = "gauss", h = 0.1, nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
?sm.density()
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
est = densityEst2d(X,x,kernel = "gauss", h = 0.1, gc=TRUE)
est.sm = sm.density(x,X,h=c(0.1,0.1))
est.sm = sm.density(x=x,X,h=c(0.1,0.1))
est.sm = sm.density(X,h=c(0.1,0.1))
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = list(x = xCoordm,y = yCoord))
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = list(x = xCoord,y = yCoord))
x <- rnorm(100)
y <- rnorm(100)
# Create a grid of evaluation points
x_points <- seq(-3, 3, length.out = 50)
y_points <- seq(-3, 3, length.out = 50)
grid <- list(x = x_points, y = y_points)
# 2D density estimation at specified points
result <- sm.density(cbind(x, y), eval.points = grid)
edit(sm.density)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
X
dim(X)
dim(x)
x = as.matrix(expand.grid(xGrid,yGrid))
dim(x)
est = densityEst2d(X,x,kernel = "gauss", h = 0.1, gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
dim(x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
dim(x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x,eval.grid=FALSE)
est.sm$eval.points
est.sm$eval.points-x
est.sm
est.sm$estimate
class(est.sm$estimate)
est.sm$estimate-est$densityEst
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x,eval.grid=FALSE,nbins=0)
z = est.sm$estimate-est$densityEst
z
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
system.time
system.time(a =1)
?system.time
Sys.time()
system.time()
system.time(expr("a =- 1"))
system.time(expr('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)'))
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(expr('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)'))
system.time('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)')
system.time(est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
system.time(a=1)
system.time(a=rand(2))
system.time(rand(2))
system.time(runif(2))
system.time(a<-runif(2))
system.time(a=runif(2))
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est <- densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
system.time(est.sm <- sm.density(X,h=c(0.2,0.2),eval.points = x,eval.grid=FALSE,nbins=0))
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
?sm.density
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est <- densityEst2d(X,x,kernel = "gauss", h = 0.05, gc=TRUE))
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
system.time(est.sm <- sm.density(X,h=c(0.05,0.05),eval.points = x,eval.grid=FALSE,nbins=0))
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
gc()
?sm.density()
(a,b) = c(1,2)
c(a,b) = c(1,2)
seq_len(10
)
1:10
split(seq_len(10),10)
split(seq_len(10),1)
x = split(seq_len(10),1)
x
x$`1`
class(x)
for (xi in x){}
for (xi in x){print(x)}
dim(NULL)
length(NULL)
nrow(NULL)
nrow(NUll)
nrow(NULL)
seq(10)
?spli
?split
seq_len(10)/2
split(seq_len(10),seq_len(10)/2)
nEval = 10
chunk_size = 2
# Process x in chunks
chunks = split(seq_len(nEval), ceiling(seq_len(nEval)/chunk_size))
chunks
ceiling(seq_len(nEval)/chunk_size)
chunk_size = 10
# Process x in chunks
chunks = split(seq_len(nEval), ceiling(seq_len(nEval)/chunk_size))
chunks
if (1 == 1) print("culo")
f <- function(x){
return(x^2)
}
g <- function(a){
if (a == 1) return(f)
else return("culo")
}
g(2)
b = g(2)
b
b = g(1)
b
b(2)
method.h = list.h$method.h }
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src")
# Clear workspace and load dependencies
rm(list = ls())
source("src/libs/loadLib.R")
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
source("src/libs/loadLib.R")
suppressPackageStartupMessages(library(plotly))
nObs = 10000
set.seed(123)
X_0 = matrix(nrow=nObs, rnorm(2*nObs))
# Create evaluation grid for density estimation and regression
nEval = 2500
xGrid = seq(from=min(X_0[,1]), to=max(X_0[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0[,2]), to=max(X_0[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# ---- Density Estimation Tests ----
# Test adaptive bandwidth density estimation
alpha = 0.5
est <- densityEst2d(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE)
est
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title="Adaptive Bandwidth Density Estimation (Gaussian Kernel)",
scene=list(
zaxis=list(title="Density"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
library(sm)
system.time(est.sm <- sm.density(X_0, eval.points=x, eval.grid=FALSE, nbins=0))
print(paste("sm package bandwidth:", est.sm$h))
# Visualize difference between implementations
z = est.sm$estimate - est$densityEst
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
sign(-3)
z = sign(z)*log(abs(z))
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
z = est.sm$estimate - est$densityEst
z = sign(z)*log10(abs(z))
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
z = est.sm$estimate - est$densityEst
# z = sign(z)*log10(abs(z))
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
est <- densityEst2dAdaptive(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE, alpha = alpha)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title="Adaptive Bandwidth Density Estimation (Gaussian Kernel)",
scene=list(
zaxis=list(title="Density"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
library(sm)
system.time(est.sm <- sm.density(X_0, eval.points=x, eval.grid=FALSE, nbins=0))
print(paste("sm package bandwidth:", est.sm$h))
# Visualize difference between implementations
z = est.sm$estimate - est$densityEst
# z = sign(z)*log10(abs(z))
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est <- densityEst2dAdaptive(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE, alpha = alpha)
DEBUG = TRUE
est <- densityEst2dAdaptive(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE, alpha = alpha)
nEval = 10
chunk_size = 2
# Process x in chunks
chunks = split(seq_len(nEval), ceiling(seq_len(nEval)/chunk_size))
chunks
length(chunks)
chunks[1]
chunks[[1]]
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est <- densityEst2dAdaptive(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE, alpha = alpha)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
suppressPackageStartupMessages(library(plotly))
# Generate random normal data for source distribution
nObs = 10000
set.seed(123)
X_0 = matrix(nrow=nObs, rnorm(2*nObs))
# Create evaluation grid for density estimation and regression
nEval = 2500
xGrid = seq(from=min(X_0[,1]), to=max(X_0[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0[,2]), to=max(X_0[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
alpha = 0.5
est <- densityEst2dAdaptive(X_0, x=x, kernel="gauss", sparse=FALSE, gc=TRUE, alpha = alpha)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title="Adaptive Bandwidth Density Estimation (Gaussian Kernel)",
scene=list(
zaxis=list(title="Density"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
library(sm)
system.time(est.sm <- sm.density(X_0, eval.points=x, eval.grid=FALSE, nbins=0))
print(paste("sm package bandwidth:", est.sm$h))
# Visualize difference between implementations
z = est.sm$estimate - est$densityEst
# z = sign(z)*log10(abs(z))
print(plot_ly(x=xCoord, y=yCoord, z=z, intensity=z, type="mesh3d") %>%
layout(title=paste("Density Estimation: sm package vs Custom Adaptive (alpha =", alpha, ")"),
scene=list(
zaxis=list(title="Difference"),
xaxis=list(title="X"),
yaxis=list(title="Y")
)))
