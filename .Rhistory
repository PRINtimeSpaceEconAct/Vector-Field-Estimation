lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
points((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
dim(X0_raw)
true_arrows = cbind(panel_vf_results$Y1, panel_vf_results$Y2)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(X0_raw[,1],X0_raw[,2],X0_raw[,1]+lengthArrows*true_arrows[,1],X0_raw[,2]+lengthArrows*true_arrows[,2],angle=15,col="black",length=0.05)
true_arrows
true_arrows = cbind(panel_vf_results$Y1, panel_vf_results$Y2)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
arrows(X0_raw_relative[,1],X0_raw_relative[,2],X0_raw_relative[,1]+lengthArrows*true_arrows[,1],X0_raw_relative[,2]+lengthArrows*true_arrows[,2],angle=15,col="black",length=0.05)
true_arrows = cbind(panel_vf_results$Y1, panel_vf_results$Y2)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
arrows(X0_raw_relative[,1],X0_raw_relative[,2],X0_raw_relative[,1]+lengthArrows*true_arrows[,1],X0_raw_relative[,2]+lengthArrows*true_arrows[,2],angle=15,col="black",length=0.05)
# reconstruct FE
VF_hat1 = compute_m(X0_raw, X0_raw, beta=derivative_obs_1$estimator, m_0=m10, x0=x[iBest,], beta_0=derivative_estimator_1$estimator[iBest,])
# Extract variables from panel_vf_results for cleaner code
derivative_obs_1 <- panel_vf_results$derivative_obs_1
derivative_obs_2 <- panel_vf_results$derivative_obs_2
derivative_estimator_1 <- panel_vf_results$derivative_estimator_1
derivative_estimator_2 <- panel_vf_results$derivative_estimator_2
iBest <- panel_vf_results$iBest
m10 <- panel_vf_results$m10
m20 <- panel_vf_results$m20
Y1 <- panel_vf_results$Y1
Y2 <- panel_vf_results$Y2
# reconstruct FE
VF_hat1 = compute_m(X0_raw, X0_raw, beta=derivative_obs_1$estimator, m_0=m10, x0=x[iBest,], beta_0=derivative_estimator_1$estimator[iBest,])
VF_hat2 = compute_m(X0_raw, X0_raw, beta=derivative_obs_2$estimator, m_0=m20, x0=x[iBest,], beta_0=derivative_estimator_2$estimator[iBest,])
YObs = aperm(array(cbind(Y1,Y2),dim = c(nT-1,nObs,2)),c(2,3,1))
VFObs = aperm(array(cbind(VF_hat1,VF_hat2),dim = c(nT-1,nObs,2)),c(2,3,1))
alpha_i_hat = apply(YObs - VFObs, MARGIN = c(1, 2), FUN = sum)/(nT-1)
gamma_t_hat = t(apply(YObs - VFObs, MARGIN = c(2, 3), FUN = sum)/nObs)
# filtro FE e TE e ristimo
Y1_rolled = array(Y1,dim=c(nT-1,nObs))
Y2_rolled = array(Y2,dim=c(nT-1,nObs))
FE1Rep = t(array(rep(alpha_i_hat[,1],nT-1),dim=c(nObs,nT-1)))
FE2Rep = t(array(rep(alpha_i_hat[,2],nT-1),dim=c(nObs,nT-1)))
TE1Rep = array(rep(gamma_t_hat[,1],nObs),dim=c(nT-1,nObs))
TE2Rep = array(rep(gamma_t_hat[,2],nObs),dim=c(nT-1,nObs))
Y1_rolled_filtered = Y1_rolled - FE1Rep - TE1Rep
Y2_rolled_filtered = Y2_rolled - FE2Rep - TE2Rep
Y1_filtered = t(Y1_rolled_filtered)
dim(Y1_filtered) = c((nT-1) * nObs)
Y2_filtered = t(Y2_rolled_filtered)
dim(Y2_filtered) = c((nT-1) * nObs)
Y_filtered = cbind(Y1_filtered,Y2_filtered)
X0 = X0_raw
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
arrows(X0_raw_relative[,1],X0_raw_relative[,2],X0_raw_relative[,1]+lengthArrows*Y_filtered[,1],
X0_raw_relative[,2]+lengthArrows*Y_filtered[,2],angle=15,col="black",length=0.05)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
arrows(X0_raw_relative[,1],X0_raw_relative[,2],X0_raw_relative[,1]+lengthArrows*VFObs[,1],
X0_raw_relative[,2]+lengthArrows*VFObs[,2],angle=15,col="black",length=0.05)
dims(VFObs)
dim(VFObs)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2]),pch=19,col="red",cex=0.5)
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2],pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2],pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
true_arrows = cbind(panel_vf_results$Y1, panel_vf_results$Y2)
lengthArrows=(5/timeInterval)*1e-1*0.5
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
arrows(X0_raw_relative[,1],X0_raw_relative[,2],X0_raw_relative[,1]+lengthArrows*true_arrows[,1],X0_raw_relative[,2]+lengthArrows*true_arrows[,2],angle=15,col="black",length=0.05)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = FALSE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
library(xtable)
# con i FE ----
timeInterval = 10 # 5 or 10 years
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
if (timeInterval == 10) {
df1 <- data
df2 <- data
data_10y <- inner_join(
df1,
df2,
by = "countryCode",
suffix = c(".x", ".y"),
relationship = "many-to-many"
) %>%
filter(Year.end.x == Year.ini.y) %>%
transmute(
countryCode = countryCode,
Year.ini = Year.ini.x,
Year.end = Year.end.y,
GDP.t0 = GDP.t0.x,
LE.t0 = LE.t0.x,
GDP.t1 = GDP.t1.y,
LE.t1 = LE.t1.y
)
# Filter to get non-overlapping 10-year intervals (e.g., 1960-1970, 1970-1980)
startYearOfDecade = min(data_10y$Year.ini) %% 10
data = data_10y %>% filter(Year.ini %% 10 == startYearOfDecade)
}
countriesDavide = read.csv(file = "datasets/countryCodeAnalysis.csv")
# Filter countries in Davide's file
data = data %>% filter(countryCode %in% countriesDavide[,2])
summary(log(data$GDP.t1/data$GDP.t0))
# count countries
length(unique(data$countryCode))
dataIni = data %>% select(c(GDP = GDP.t0,LE = LE.t0, Year = Year.ini,countryCode))
dataFin = data %>% select(c(GDP = GDP.t1,LE = LE.t1, Year = Year.end,countryCode)) %>% filter(Year == max(Year))
data = rbind(dataIni,dataFin) %>% arrange(countryCode)
data$GDP = log(data$GDP)
nObs = length(unique(data$countryCode))
nT = length(unique(data$Year))
nEval = 2500
# plot histograms of GDP growth
## qui tutto stima ----
# create array
X = array(NA,dim=c(nObs, 2, nT))
for (year in unique(data$Year)) {
X[,,(year - min(data$Year))/timeInterval+1] = cbind(data$GDP[data$Year == year], data$LE[data$Year == year])
}
# eval points
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Call the new encapsulated function from panel.R
panel_vf_results <- estimate_panel_vf(X,
x = x,
nEval = nEval,
FE = TRUE,
TE = TRUE,
uniform_weights = TRUE,
kernel.type = "epa",
method.h = "silverman",
chunk_size = 512,
sparse = FALSE,
gc = FALSE)
VF_hat <- panel_vf_results$estimator
X0_raw <- panel_vf_results$X0_raw
bootstrap_samples <- bootstrapPanelVF(panel_vf_results, B = 100)
signifBoot <- significanceBootstrap(panel_vf_results, bootstrap_samples, p_crit = 0.01)
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Filter for significance
VF_hat[!signifBoot, ] <- 0
x[,1] = x[,1]/median(filter(data,Year==2010)$GDP)
x[,2] = x[,2]/median(filter(data,Year==2010)$LE)
VF_hat[,1] = VF_hat[,1]/median(filter(data,Year==2010)$GDP)
VF_hat[,2] = VF_hat[,2]/median(filter(data,Year==2010)$LE)
# lenVF = sqrt(VF_hat[,1]^2 + VF_hat[,2]^2)
# VF_hat[lenVF>1.5,] = c(0,0)
# ind.rm = c(which(x[,2] > x[,1]+0.125),which(x[,2] < x[,1]-0.25))
# VF_hat[ind.rm,] = c(0,0)
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2],pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
graphics.off()
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = FALSE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
library(xtable)
# con i FE ----
timeInterval = 10 # 5 or 10 years
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
if (timeInterval == 10) {
df1 <- data
df2 <- data
data_10y <- inner_join(
df1,
df2,
by = "countryCode",
suffix = c(".x", ".y"),
relationship = "many-to-many"
) %>%
filter(Year.end.x == Year.ini.y) %>%
transmute(
countryCode = countryCode,
Year.ini = Year.ini.x,
Year.end = Year.end.y,
GDP.t0 = GDP.t0.x,
LE.t0 = LE.t0.x,
GDP.t1 = GDP.t1.y,
LE.t1 = LE.t1.y
)
# Filter to get non-overlapping 10-year intervals (e.g., 1960-1970, 1970-1980)
startYearOfDecade = min(data_10y$Year.ini) %% 10
data = data_10y %>% filter(Year.ini %% 10 == startYearOfDecade)
}
countriesDavide = read.csv(file = "datasets/countryCodeAnalysis.csv")
# Filter countries in Davide's file
data = data %>% filter(countryCode %in% countriesDavide[,2])
summary(log(data$GDP.t1/data$GDP.t0))
# count countries
length(unique(data$countryCode))
dataIni = data %>% select(c(GDP = GDP.t0,LE = LE.t0, Year = Year.ini,countryCode))
dataFin = data %>% select(c(GDP = GDP.t1,LE = LE.t1, Year = Year.end,countryCode)) %>% filter(Year == max(Year))
data = rbind(dataIni,dataFin) %>% arrange(countryCode)
data$GDP = log(data$GDP)
nObs = length(unique(data$countryCode))
nT = length(unique(data$Year))
nEval = 2500
# plot histograms of GDP growth
## qui tutto stima ----
# create array
X = array(NA,dim=c(nObs, 2, nT))
for (year in unique(data$Year)) {
X[,,(year - min(data$Year))/timeInterval+1] = cbind(data$GDP[data$Year == year], data$LE[data$Year == year])
}
# eval points
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Call the new encapsulated function from panel.R
panel_vf_results <- estimate_panel_vf(X,
x = x,
nEval = nEval,
FE = TRUE,
TE = TRUE,
uniform_weights = TRUE,
kernel.type = "epa",
method.h = "silverman",
chunk_size = 512,
sparse = FALSE,
gc = FALSE)
VF_hat <- panel_vf_results$estimator
X0_raw <- panel_vf_results$X0_raw
bootstrap_samples <- bootstrapPanelVF(panel_vf_results, B = 100)
signifBoot <- significanceBootstrap(panel_vf_results, bootstrap_samples, p_crit = 0.01)
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Filter for significance
VF_hat[!signifBoot, ] <- 0
x[,1] = x[,1]/median(filter(data,Year==2010)$GDP)
x[,2] = x[,2]/median(filter(data,Year==2010)$LE)
VF_hat[,1] = VF_hat[,1]/median(filter(data,Year==2010)$GDP)
VF_hat[,2] = VF_hat[,2]/median(filter(data,Year==2010)$LE)
# lenVF = sqrt(VF_hat[,1]^2 + VF_hat[,2]^2)
# VF_hat[lenVF>1.5,] = c(0,0)
# ind.rm = c(which(x[,2] > x[,1]+0.125),which(x[,2] < x[,1]-0.25))
# VF_hat[ind.rm,] = c(0,0)
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2],pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = FALSE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
library(xtable)
# con i FE ----
timeInterval = 10 # 5 or 10 years
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
if (timeInterval == 10) {
df1 <- data
df2 <- data
data_10y <- inner_join(
df1,
df2,
by = "countryCode",
suffix = c(".x", ".y"),
relationship = "many-to-many"
) %>%
filter(Year.end.x == Year.ini.y) %>%
transmute(
countryCode = countryCode,
Year.ini = Year.ini.x,
Year.end = Year.end.y,
GDP.t0 = GDP.t0.x,
LE.t0 = LE.t0.x,
GDP.t1 = GDP.t1.y,
LE.t1 = LE.t1.y
)
# Filter to get non-overlapping 10-year intervals (e.g., 1960-1970, 1970-1980)
startYearOfDecade = min(data_10y$Year.ini) %% 10
data = data_10y %>% filter(Year.ini %% 10 == startYearOfDecade)
}
countriesDavide = read.csv(file = "datasets/countryCodeAnalysis.csv")
# Filter countries in Davide's file
data = data %>% filter(countryCode %in% countriesDavide[,2])
summary(log(data$GDP.t1/data$GDP.t0))
# count countries
length(unique(data$countryCode))
dataIni = data %>% select(c(GDP = GDP.t0,LE = LE.t0, Year = Year.ini,countryCode))
dataFin = data %>% select(c(GDP = GDP.t1,LE = LE.t1, Year = Year.end,countryCode)) %>% filter(Year == max(Year))
data = rbind(dataIni,dataFin) %>% arrange(countryCode)
data$GDP = log(data$GDP)
nObs = length(unique(data$countryCode))
nT = length(unique(data$Year))
nEval = 2500
# plot histograms of GDP growth
## qui tutto stima ----
# create array
X = array(NA,dim=c(nObs, 2, nT))
for (year in unique(data$Year)) {
X[,,(year - min(data$Year))/timeInterval+1] = cbind(data$GDP[data$Year == year], data$LE[data$Year == year])
}
# eval points
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Call the new encapsulated function from panel.R
panel_vf_results <- estimate_panel_vf(X,
x = x,
nEval = nEval,
FE = TRUE,
TE = TRUE,
uniform_weights = TRUE,
kernel.type = "gauss",
method.h = "silverman",
chunk_size = 512,
sparse = FALSE,
gc = FALSE)
VF_hat <- panel_vf_results$estimator
X0_raw <- panel_vf_results$X0_raw
bootstrap_samples <- bootstrapPanelVF(panel_vf_results, B = 100)
signifBoot <- significanceBootstrap(panel_vf_results, bootstrap_samples, p_crit = 0.01)
xGrid = seq(from=min(X[,1,]), to=max(X[,1,]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2,]), to=max(X[,2,]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# Filter for significance
VF_hat[!signifBoot, ] <- 0
x[,1] = x[,1]/median(filter(data,Year==2010)$GDP)
x[,2] = x[,2]/median(filter(data,Year==2010)$LE)
VF_hat[,1] = VF_hat[,1]/median(filter(data,Year==2010)$GDP)
VF_hat[,2] = VF_hat[,2]/median(filter(data,Year==2010)$LE)
# lenVF = sqrt(VF_hat[,1]^2 + VF_hat[,2]^2)
# VF_hat[lenVF>1.5,] = c(0,0)
# ind.rm = c(which(x[,2] > x[,1]+0.125),which(x[,2] < x[,1]-0.25))
# VF_hat[ind.rm,] = c(0,0)
lengthArrows=(5/timeInterval)*1e-1*0.5
X0_raw_relative = X0_raw
X0_raw_relative[,1] = X0_raw_relative[,1]/median(filter(data,Year==2010)$GDP)
X0_raw_relative[,2] = X0_raw_relative[,2]/median(filter(data,Year==2010)$LE)
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
plot(x, type = "n", xlab = "Log GDP per capita (PPP in million 2017 USD, relative to 2010)", ylab = "Life Expectancy (relative to 2010)", main = "")
abline(h=1,lty=3)
abline(v=1,lty=3)
arrows(x[,1],x[,2],x[,1]+lengthArrows*VF_hat[,1],x[,2]+lengthArrows*VF_hat[,2],angle=15,col="black",length=0.05)
dataFirst = filter(data,Year == min(Year))
dataLatest = filter(data,Year == max(Year))
#points((data$GDP)/median(filter(data,Year==2010)$GDP),data$LE/median(filter(data,Year==2010)$LE),pch=19,col="red",cex=0.5)
points(X0_raw_relative[,1],X0_raw_relative[,2],pch=19,col="red",cex=0.5)
#text((dataLatest$GDP)/median(filter(data,Year==2010)$GDP),dataLatest$LE/median(filter(data,Year==2010)$LE),labels=dataLatest$countryCode,cex=0.5,pos=4,col="red")
est.dens = sm.density(X0_raw_relative,display="none")
contour(est.dens$eval.points[,1], est.dens$eval.points[,2], est.dens$estimate,add=T,col="purple")
args
argomenti = listN(alpha=0.5,h=0.3,pippo =  10)
argomenti
argomenti = list(alpha=0.5,h=0.3,pippo =  10)
argomenti$alpha
argomenti=list(h=10)
