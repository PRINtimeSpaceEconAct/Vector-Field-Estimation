print(paste(" Gaussian kernel", "bandwidth =", bandwidth))
X = X_0_Gauss
h = bandwidth
kernel.type = "gauss"
sparse=FALSE
gc=TRUE
type.est = "density"
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
chunk_size = 1000
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
lambda = NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
method.h=NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
kernelMethodCULO
resultEst$x == resultEstCULO$x
resultEst$estimator == resultEstCULO$estimator
resultEst$estimator
resultEstCULO$estimator
resultEst$estimator
resultEstCULO$estimator
resultEst$estimator
resultEstCULO$estimator
resultEst$estimator
resultEstCULO$estimator
resultEstCULO$estimator - resultEst$estimator
# X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = 1*diag(2))
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = matrix(c(1, 0.5, 0.5, 1), nrow=2))
plot(X_0_Gauss)
# X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = 1*diag(2))
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = matrix(c(0.5, 0.5, 0.5, 0.5), nrow=2))
plot(X_0_Gauss)
# X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = 1*diag(2))
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2))
plot(X_0_Gauss)
nEval = 2500
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
sigma = matrix(c(1, 0, 0, 1), nrow=2)
trueGaussian = dmvnorm(x, mean, sigma)
# ---- Density Estimation Tests ----
print("#---- Density Estimation Tests ----")
print("We start by testing the fixed bandwidth density estimation against the sm package")
print("================================================")
print(paste("Number of observations:", nObs))
print(paste("Number of evaluation points:", nEval))
print("================================================")
print("Estimating a standard Gaussian")
bandwidth = 0.5
print(paste(" Gaussian kernel", "bandwidth =", bandwidth))
X = X_0_Gauss
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO$estimator - resultEst$estimator
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO$estimator - resultEst$estimator
image(resultEstCULO$estimator - resultEst$estimator)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernel.R", echo=TRUE)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO$estimator - resultEst$estimator
nObs = 10
set.seed(123)
# X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = 1*diag(2))
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2))
# Create evaluation grid for density estimation and regression
nEval = 2500
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
sigma = matrix(c(1, 0, 0, 1), nrow=2)
trueGaussian = dmvnorm(x, mean, sigma)
nObs = 10
set.seed(123)
# Sigma = matrix(c(1, 0, 0, 1), nrow=2)
Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2)
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = Sigma)
# Create evaluation grid for density estimation and regression
nEval = 2500
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
trueGaussian = dmvnorm(x, mean, Sigma)
print("#---- Density Estimation Tests ----")
print("We start by testing the fixed bandwidth density estimation against the sm package")
print("================================================")
print(paste("Number of observations:", nObs))
print(paste("Number of evaluation points:", nEval))
print("================================================")
print("Estimating a standard Gaussian")
bandwidth = 0.5
print(paste(" Gaussian kernel", "bandwidth =", bandwidth))
X = X_0_Gauss
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
X
# Generate random normal data for source distribution
nObs = 10000
set.seed(123)
# Sigma = matrix(c(1, 0, 0, 1), nrow=2)
Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2)
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = Sigma)
# Create evaluation grid for density estimation and regression
nEval = 10
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
trueGaussian = dmvnorm(x, mean, Sigma)
# ---- Density Estimation Tests ----
print("#---- Density Estimation Tests ----")
print("We start by testing the fixed bandwidth density estimation against the sm package")
print("================================================")
print(paste("Number of observations:", nObs))
print(paste("Number of evaluation points:", nEval))
print("================================================")
print("Estimating a standard Gaussian")
bandwidth = 0.5
print(paste(" Gaussian kernel", "bandwidth =", bandwidth))
estGaussian <- densityEst2d(X_0_Gauss, x=x, h=bandwidth, kernel.type = "gauss", sparse=FALSE, gc=TRUE)
X = X_0_Gauss
X
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
D_chunk = computeDcomponents(X, x, sparse=sparse)
nObs = nrow(X)
covX = cov(X)
invS = solve(covX)
sqrtinvS = sqrtm(solve(covX))
detS = det(covX)
D_chunkCULO = computeDcomponents(Z, z, sparse=sparse)
Z = X %*% sqrtinvS
z = x %*% sqrtinvS
D_chunkCULO = computeDcomponents(Z, z, sparse=sparse)
D_chunkCULO
D_chunk
D_chunkCULO
D_chunk
D_chunkCULO
D_chunk
M = mahalanobis(D_chunk$z1, D_chunk$z2, A=diag(2), den=h^2 * lambda^2)
M = mahalanobis(D_chunk$z1, D_chunk$z2, A=invS, den=h^2 * lambda^2)
D_chunk
M = mahalanobis(D_chunk$z1, D_chunk$z2, A=invS, den=h^2 * lambda^2)
invS
sqrtinvS
M
invS
h
lambda
lambda =1
M = mahalanobis(D_chunk$z1, D_chunk$z2, A=invS, den=h^2 * lambda^2)
M
MCULO = mahalanobis(D_chunkCULO$z1, D_chunkCULO$z2, A=diag(2), den=h^2 * lambda^2)
M
M - MCULO
# Kernel computation
K = kernelFunction(M)
kernelFunction = defineKernel(kernel.type)
# Kernel computation
K = kernelFunction(M)
K_scaled = sweep(K, 1, lambda^2, "/")
computeTerms(Z, Y, h, detS, K_scaled, type.est)
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("libs/loadLib.R")
source("libs/codeMunicipalities.R")
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(sm))
suppressPackageStartupMessages(library(mvtnorm))
# ---- Data Generation ----
# Generate random normal data for source distribution
nObs = 10000
set.seed(123)
# Sigma = matrix(c(1, 0, 0, 1), nrow=2)
Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2)
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = Sigma)
# Create evaluation grid for density estimation and regression
nEval = 10
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
trueGaussian = dmvnorm(x, mean, Sigma)
# ---- Density Estimation Tests ----
print("#---- Density Estimation Tests ----")
print("We start by testing the fixed bandwidth density estimation against the sm package")
print("================================================")
print(paste("Number of observations:", nObs))
print(paste("Number of evaluation points:", nEval))
print("================================================")
print("Estimating a standard Gaussian")
bandwidth = 0.5
print(paste(" Gaussian kernel", "bandwidth =", bandwidth))
X = X_0_Gauss
kernel.type="gauss"
method.h=NULL
h=NULL
lambda=NULL
sparse=FALSE
gc=FALSE
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
chunk_size  = 1000
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
type.est = "density"
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO$estimator - resultEst$estimator
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("libs/loadLib.R")
source("libs/codeMunicipalities.R")
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(sm))
suppressPackageStartupMessages(library(mvtnorm))
# ---- Data Generation ----
# Generate random normal data for source distribution
nObs = 10000
set.seed(123)
# Sigma = matrix(c(1, 0, 0, 1), nrow=2)
Sigma = matrix(c(0.75, 0.5, 0.5, 0.75), nrow=2)
X_0_Gauss = mvrnorm(nObs, mu=c(0,0),Sigma = Sigma)
# Create evaluation grid for density estimation and regression
nEval = 2500
xGrid = seq(from=min(X_0_Gauss[,1]), to=max(X_0_Gauss[,1]), length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X_0_Gauss[,2]), to=max(X_0_Gauss[,2]), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
mean = c(0, 0)
trueGaussian = dmvnorm(x, mean, Sigma)
# ---- Density Estimation Tests ----
print("#---- Density Estimation Tests ----")
print("We start by testing the fixed bandwidth density estimation against the sm package")
print("================================================")
print(paste("Number of observations:", nObs))
print(paste("Number of evaluation points:", nEval))
print("================================================")
print("Estimating a standard Gaussian")
bandwidth = 0.5
X = X_0_Gauss
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
chunk_size = 1000
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
lambda = NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
type.est = "density"
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
h=NULL
ambda=NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
method.h=NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
kernel.type="gauss"
lambda=NULL
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
sparse=FALSE
gc=FALSE
resultEst = kernelMethod(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEstCULO = kernelMethodCULO(X=X,x=x,nEval=nEval,kernel.type=kernel.type,D=D,
method.h=method.h,h=h,lambda=lambda,
sparse=sparse,gc=gc,chunk_size=chunk_size,type.est=type.est)
resultEst$estimator - resultEstCULO$estimator
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src")
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
_debugPrint()
?debugPrint
??debugPrint
edit(debugPrint())
edit(debugPrint
edit(debugPrint)
alpha_opt = if (!is.null(result$alpha)) result$alpha else NULL
result$alpha = 3
result = list(alpha = 3)
alpha_opt = if (!is.null(result$alpha)) result$alpha else NULL
alpha_opt
result = list()
# Parameters specific to adaptive case
alpha_opt = if (!is.null(result$alpha)) result$alpha else NULL
alpha_opt
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^4 - x^2 + y^2
#     # VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
#     return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
# }
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
# xGrid = seq(from=min(c(X0[,1],X1[,1])), to=max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
# yGrid = seq(from=min(c(X0[,2],X1[,2])), to=max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "silverman",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
est_field_adaptive$estimator
dim(est_field_adaptive$estimator)
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "silverman",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
est_field_adaptive
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "silverman",
chunk_size=3000,
sparse=FALSE, gc=TRUE,hOpt=TRUE)
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5, hOpt = TRUE)
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5,
hOpt = TRUE, alphaOpt = TRUE)
DEBUG = FALSE
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5,
hOpt = TRUE, alphaOpt = TRUE)
ls(est_field_adaptive)
est_field_adaptive$alphaGrid
est_field_adaptive$hGrid
est_field_adaptive$AICc_values
contour(est_field_adaptive$AICc_values)
contour(est_field_adaptive$AICc_values,nlevels = 100)
contour(est_field_adaptive$AICc_values,nlevels = 10)
contour(log(est_field_adaptive$AICc_values+50),nlevels = 10)
contour(est_field_adaptive$AICc_values)
contour(log(est_field_adaptive$AICc_values+50),nlevels = 10)
contour(log(est_field_adaptive$AICc_values+50),nlevels = 100)
image(est_field_adaptive)
image(est_field_adaptive$AICc_values)
image(est_field_adaptive$AICc_values,col="rainbow")
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
VFx = t(apply(x, 1, VF))
plot(est_field_adaptive$x, type = "n", xlab = "X", ylab = "Y", main = "Error Vector Field")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + est_field_adaptive$estimator[,1] - VFx[,1],
est_field_adaptive$x[,2] + est_field_adaptive$estimator[,2] - VFx[,2],
length = 0.05, angle = 15, col = "red")
errorNorm = sqrt((est_field_adaptive$estimator[,1] - VFx[,1])^2 + (est_field_adaptive$estimator[,2] - VFx[,2])^2)
image.plot(x = unique(x[,1]), y = unique(x[,2]), z = matrix(log10(errorNorm), nrow=sqrt(nEval), ncol=sqrt(nEval)),xlab="x",ylab="y",main="error norm (log10)")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 1000
nEval = 2500
# data Generation ----
set.seed(1)
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.5*diag(2))
# example 1 - double well ----
VF <- function(X){
# X = (x,y)
# U(X) = x^4 - x^2 + y^2
# VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
}
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.01*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
# M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
# VF <- function(X){
#     # X = (x,y), theta = pi/4
#     return (M %*% X)
# }
# apply VF
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
# xGrid = seq(from=min(c(X0[,1],X1[,1])), to=max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
# yGrid = seq(from=min(c(X0[,2],X1[,2])), to=max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
est_field_adaptive = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "silverman",
chunk_size=3000,
sparse=FALSE, gc=TRUE)
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "silverman",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5,
hOpt = TRUE, alphaOpt = TRUE)
# est = est_field_adaptive
t = Sys.time() - t0
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
signifVFest = significanceVF(est_field_adaptive,X0,X1,0.01)
lengthArrows=0.1
plot(x, type = "n", xlab = TeX(r'($X_1$)'), ylab=TeX(r'($X_2$)'), main = "")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + lengthArrows*est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + lengthArrows*est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
abline(h=0)
abline(v=0)
VFx = t(apply(x, 1, VF))
plot(est_field_adaptive$x, type = "n", xlab = "X", ylab = "Y", main = "Error Vector Field")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + est_field_adaptive$estimator[,1] - VFx[,1],
est_field_adaptive$x[,2] + est_field_adaptive$estimator[,2] - VFx[,2],
length = 0.05, angle = 15, col = "red")
errorNorm = sqrt((est_field_adaptive$estimator[,1] - VFx[,1])^2 + (est_field_adaptive$estimator[,2] - VFx[,2])^2)
image.plot(x = unique(x[,1]), y = unique(x[,2]), z = matrix(log10(errorNorm), nrow=sqrt(nEval), ncol=sqrt(nEval)),xlab="x",ylab="y",main="error norm (log10)")
bootstrapNWfieldErrors(est_field_adaptive)
DEBUG = FALSE
bootstrapNWfieldErrors(est_field_adaptive)
