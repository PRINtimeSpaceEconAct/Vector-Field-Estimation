nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 3
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 2
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
forecastObs
points(forecastObs[,,nPeriods],cex=0.5,col="purple")
points(forecastObs[,,nPeriods],col="purple",pch=19)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
# forecast delle obs 1960
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 2
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 3
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 2
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
min(c(X0[,1],X1[,1])
=
min(c(X0[,1],X1[,1]))
# eval points
xGrid = seq(from=0.9*min(c(X0[,1],X1[,1])), to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0.9*min(c(X0[,2],X1[,2])), to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# est_field = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_fieldTREND = LLfield(X0, X1, x=x, kernel.type="gauss",h = 1000000,
#                     chunk_size=1000,
#                     sparse=FALSE, gc=TRUE)
#
# est_field$estimator = est_field$estimator - est_fieldTREND$estimator
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
firstYear = min(data$Year.ini)
dataLatest = filter(data,Year.end == latestYear)
dataFirst = filter(data,Year.ini == firstYear)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 10
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# parameters ----
nObs = 10000
nEval = 2500
# data Generation ----
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 1*diag(2))
# example 3 -- rotation ----
M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
VF <- function(X){
# X = (x,y), theta = pi/4
return (M %*% X)
}
# apply VF
X1 = X0 + t(apply(X0, 1, VF))
# eval points
xGrid = seq(from=min(c(X0[,1],X1[,1]))-1, to=max(c(X0[,1],X1[,1]))+1, length.out=round(sqrt(nEval)))
yGrid = seq(from=min(c(X0[,2],X1[,2]))-1, to=max(c(X0[,2],X1[,2]))+1, length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE, alpha=0.5)
# est_field_adaptive = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est = est_field_adaptive
t = Sys.time() - t0
# plot ----
## plot campo vero ----
VFx = t(apply(x, 1, VF))
plot(x, type = "n", xlab = "X", ylab = "Y", main = "True Vector Field")
arrows(x[,1],x[,2],x[,1]+VFx[,1],x[,2]+VFx[,2],angle=15,col="black",length=0.05)
## plot campo stimato ----
plot(est_field_adaptive$x, type = "n", xlab = "X", ylab = "Y", main = "Estimated Vector Field")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
nPeriods = 10
forecast = forecastDiscrete(X0, est_field_adaptive, speedFactor = 1, nPeriods = nPeriods)
for (i in 1:nPeriods) {
plot(est_field_adaptive$x, type = "n", xlab = "X", ylab = "Y", main = "Estimated Vector Field")
arrows(est_field_adaptive$x[,1], est_field_adaptive$x[,2],
est_field_adaptive$x[,1] + est_field_adaptive$estimator[,1],
est_field_adaptive$x[,2] + est_field_adaptive$estimator[,2],
length = 0.05, angle = 15, col = "blue")
points(forecast[,,i],cex=0.5)
Sys.sleep(0.1)
}
xGrid = seq(from=0.5*min(c(X0[,1],X1[,1])), to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0.5*min(c(X0[,2],X1[,2])), to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# est_field = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_fieldTREND = LLfield(X0, X1, x=x, kernel.type="gauss",h = 1000000,
#                     chunk_size=1000,
#                     sparse=FALSE, gc=TRUE)
#
# est_field$estimator = est_field$estimator - est_fieldTREND$estimator
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
X0 = cbind(as.numeric(data$GDP.t0),as.numeric(data$LE.t0))
X1 = cbind(as.numeric(data$GDP.t1),as.numeric(data$LE.t1))
# data = dataset.GDP.LE.REL
# X0 = cbind(as.numeric(data$GDP.REL.t0),as.numeric(data$LE.REL.t0))
# X1 = cbind(as.numeric(data$GDP.REL.t1),as.numeric(data$LE.REL.t1))
# draw transitions as they are ----
plot(X0, type = "n", xlab = "X", ylab = "Y", main = "True Vector Field")
arrows(X0[,1], X0[,2], X1[,1], X1[,2], length = 0.05, angle = 15, col = "black")
# parameters ----
nEval = 2500
# eval points
xGrid = seq(from=0, to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0, to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# est_field = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_fieldTREND = LLfield(X0, X1, x=x, kernel.type="gauss",h = 1000000,
#                     chunk_size=1000,
#                     sparse=FALSE, gc=TRUE)
#
# est_field$estimator = est_field$estimator - est_fieldTREND$estimator
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
firstYear = min(data$Year.ini)
dataLatest = filter(data,Year.end == latestYear)
dataFirst = filter(data,Year.ini == firstYear)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
# forecast delle obs 1960
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 10
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 0.1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 0.01
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
speedFactor = 0.001
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
nPeriods = 922
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
# forecast delle obs 1960
speedFactor = 0.001
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 922
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
xGrid = seq(from=-10000, to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0.9*min(c(X0[,2],X1[,2])), to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# est_field = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_fieldTREND = LLfield(X0, X1, x=x, kernel.type="gauss",h = 1000000,
#                     chunk_size=1000,
#                     sparse=FALSE, gc=TRUE)
#
# est_field$estimator = est_field$estimator - est_fieldTREND$estimator
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
firstYear = min(data$Year.ini)
dataLatest = filter(data,Year.end == latestYear)
dataFirst = filter(data,Year.ini == firstYear)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
# forecast delle obs 1960
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
nPeriods = 10
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black")
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red")
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=2)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=2)
# forecast delle obs 1960
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
points(forecastObs[,,nPeriods],col="purple",pch=19)
# forecast delle obs
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
estForecastObs = sm.regression(forecastObs[,1],forecastObs[,2],display="none")
estForecastObs = sm.regression(forecastObs[,1,nPeriods],forecastObs[,2,nPeriods],display="none")
forecastEst = forecastDiscrete(cbind(estForecastObs$eval.points,estForecastObs$estimate), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(dplyr)
library(sm)
load("datasets/datasetGDP.LE.NonOverlapping.RData")
# load("datasets/datasetGDP.LE.Overlapping.RData")
data = dataset.GDP.LE
X0 = cbind(as.numeric(data$GDP.t0),as.numeric(data$LE.t0))
X1 = cbind(as.numeric(data$GDP.t1),as.numeric(data$LE.t1))
# data = dataset.GDP.LE.REL
# X0 = cbind(as.numeric(data$GDP.REL.t0),as.numeric(data$LE.REL.t0))
# X1 = cbind(as.numeric(data$GDP.REL.t1),as.numeric(data$LE.REL.t1))
# draw transitions as they are ----
plot(X0, type = "n", xlab = "X", ylab = "Y", main = "True Vector Field")
arrows(X0[,1], X0[,2], X1[,1], X1[,2], length = 0.05, angle = 15, col = "black")
# parameters ----
nEval = 2500
# eval points
xGrid = seq(from=-20000, to=1.1*max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
yGrid = seq(from=0.9*min(c(X0[,2],X1[,2])), to=1.1*max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# est_field = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
est_field = LLfield(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_fieldTREND = LLfield(X0, X1, x=x, kernel.type="gauss",h = 1000000,
#                     chunk_size=1000,
#                     sparse=FALSE, gc=TRUE)
#
# est_field$estimator = est_field$estimator - est_fieldTREND$estimator
## plot campo stimato ----
lengthArrows = 1.0
latestYear = max(data$Year.end)
firstYear = min(data$Year.ini)
dataLatest = filter(data,Year.end == latestYear)
dataFirst = filter(data,Year.ini == firstYear)
# forecast delle obs
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
estForecastObs = sm.regression(forecastObs[,1,nPeriods],forecastObs[,2,nPeriods],display="none")
forecastEst = forecastDiscrete(cbind(estForecastObs$eval.points,estForecastObs$estimate), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
graph2T()
graphics
graphics.off()
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black",cex=0.5)
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red",cex=0.5)
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=4)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=4)
# forecast delle obs 1960
points(forecastObs[,,nPeriods],col="purple",pch=19,cex=0.5)
lines(estForecastObs$eval.points,estForecastObs$estimate,col="purple",lwd=4)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black",cex=0.5)
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red",cex=0.5)
text(dataLatest$GDP.t0,dataLatest$LE.t0,labels=dataLatest$countryCode, col="red",cex=1,pos=4)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=4)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=4)
# forecast delle obs 1960
points(forecastObs[,,nPeriods],col="purple",pch=19,cex=0.5)
lines(estForecastObs$eval.points,estForecastObs$estimate,col="purple",lwd=4)
dev.new()
# campo
plot(est_field$x, type = "n", xlab = "GDP per capita", ylab = "Life Expectancy", main = "Estimated Vector Field")
arrows(est_field$x[,1], est_field$x[,2],
est_field$x[,1] + lengthArrows*est_field$estimator[,1],
est_field$x[,2] + lengthArrows*est_field$estimator[,2],
length = 0.05, angle = 15, col = "blue")
# punti
points(dataFirst$GDP.t0,dataFirst$LE.t0,pch=19,col="black",cex=0.5)
text(dataFirst$GDP.t0,dataFirst$LE.t0,labels=dataFirst$countryCode,cex=1,pos=4,col="black")
points(dataLatest$GDP.t0,dataLatest$LE.t0,pch=19,col="red",cex=0.5)
# non parametriche
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=4)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=4)
# forecast delle obs 1960
points(forecastObs[,,nPeriods],col="purple",pch=19,cex=0.5)
lines(estForecastObs$eval.points,estForecastObs$estimate,col="purple",lwd=4)
estFirst = sm.regression(dataFirst$GDP.t0,dataFirst$LE.t0,display="none")
estLatest = sm.regression(dataLatest$GDP.t1,dataLatest$LE.t1,display="none")
lines(estFirst$eval.points,estFirst$estimate,col="black",lwd=4)
lines(estLatest$eval.points,estLatest$estimate,col="red",lwd=4)
# forecast delle obs 1960
points(forecastObs[,,nPeriods],col="purple",pch=19,cex=0.5)
lines(estForecastObs$eval.points,estForecastObs$estimate,col="purple",lwd=4)
# forecast delle obs
speedFactor = 1
nPeriods = (2015-1960)/5 * 1/speedFactor
forecastObs = forecastDiscrete(cbind(dataFirst$GDP.t0,dataFirst$LE.t0), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
estForecastObs = sm.regression(forecastObs[,1,nPeriods],forecastObs[,2,nPeriods],display="none")
forecastEst = forecastDiscrete(cbind(estFirst$eval.points,estFirst$estimate), est_field, speedFactor = speedFactor, nPeriods = nPeriods)
forecastEst
dim(forecastEst)
