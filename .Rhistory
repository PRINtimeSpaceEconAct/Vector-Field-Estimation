)
mean(rlnorm(NObs))
spatGini
spatGiniRep
spatGiniRep*4000
spatGiniRep = vector(mode="numeric",NRep)
for (i in 1:NRep){
print(i)
# x = exp(rnorm(NObs))
x = runif(NObs)
# x = c(rep(0,NObs/2),1,rep(0,NObs/2-1))
Dx = abs(matrix(rep(x, NObs), nrow=NObs)  - matrix(rep(x, NObs), nrow=NObs,byrow=TRUE))
spatGiniRep[i] = sum(W*Dx) / (2*NObs^2 * mean(x))
}
spatGiniRep*4000
# begin ----
rm(list = ls())
# libraries ----
library(dplyr)
library(spdep)
library(Matrix)
# generate ----
N = 10
grid = GridTopology(c(0,0),c(1/N,1/N),c(N,N))
coord = coordinates(grid)
## contiguity ----
grid_nb = cell2nb(nrow = N, ncol=N, torus = TRUE, type="queen", x=grid)
## level of lags ----
All_nb = nblag(grid_nb,3)
### contiguity 1 ----
W = as(nb2mat(All_nb[[1]],style="W"),"sparseMatrix")
eps = rnorm(N*N)
rho = 0.5
Mat = as((N*N) - rho*W,"sparseMatrix")
Y = solve(Mat,eps)
Y
det(Mat)
dim(W)
Mat = as(diag(N*N) - rho*W,"sparseMatrix")
det(Mat)
Y = solve(Mat,eps)
Y
plot(grid_nb)
plot(coord)
plot(coord,Y)
N = 20
grid = GridTopology(c(0,0),c(1/N,1/N),c(N,N))
coord = coordinates(grid)
## contiguity ----
grid_nb = cell2nb(nrow = N, ncol=N, torus = TRUE, type="queen", x=grid)
## level of lags ----
All_nb = nblag(grid_nb,3)
### contiguity 1 ----
W = as(nb2mat(All_nb[[1]],style="W"),"sparseMatrix")
eps = rnorm(N*N)
rho = 0.5
Mat = as(diag(N*N) - rho*W,"sparseMatrix")
Y = solve(Mat,eps)
plot(coord)
grid = GridTopology(c(0,0),c(1/N,1/N),c(N,N))
grid
plot(coord,Y)
lengh(Y)
length(Y)
plot(grid_nb)
plot.nb(grid_nb,grid)
library(sf)
?sf
?nb2lines()
plot(coords,col=Y)
Y
class(Y)
plot(coords,col=as.numeric(Y))
st_geometry(grid_nb)
?st_geometry
?sf
sf(grid_nb)
library(sf)
?nb2lines()
nb2lines(grid_nb)
nb2lines(grid_nb,coords=coord)
spLines = nb2lines(grid_nb,coords=coor)
spLines = nb2lines(grid_nb,coords=coord)
plot(spLines)
dev.copy2pdf(file="angelaPuppa.pdf")
grid_nb
grid_nb = cell2nb(nrow = N, ncol=N, torus = FALSE, type="queen", x=grid)
## level of lags ----
All_nb = nblag(grid_nb,3)
### contiguity 1 ----
W = as(nb2mat(All_nb[[1]],style="W"),"sparseMatrix")
eps = rnorm(N*N)
rho = 0.5
Mat = as(diag(N*N) - rho*W,"sparseMatrix")
Y = solve(Mat,eps)
spLines = nb2lines(grid_nb,coords=coord)
plot(spLines)
?plot.SpatialGrid
spLines
spLines$wt
spLines$wt <- Y
length(spLines$wt)
spLines
devtools::install_github("amvallone/estdaR")
install.packages(gasfluxes)
install.packages("gasfluxes")
install.packages(etm)
install.packages("etm")
library(etmÃ¨)
library(etm)
?bdiag
?pnorm
devtools::install_github("amvallone/estdaR")
install.packages("gasfluxes")
version()
version()
devtools::install_github("amvallone/estdaR")
install.packages("devtools")
devtools::install_github("amvallone/estdaR")
library(estdaR)
?estdaR
??estdaR
??estdR
?estdaR::d.LISA()
coefs = c(0.0456 ,0.0357 ,0.0138 ,0.0105 ,0.0055 ,-0.0003,0.0052 ,0.0029 ,0.0008 ,-0.0002,0.0011 ,0.0027 ,0.0025 ,-0.0003,-0.0001,0.0026 ,0.0013 ,0.0009 ,0.0009 )
coefs
coefs
coefs[1:8]
coefs = coefs[1:8]
plot(coefs)
plot(coefs,type="l")
plot(log(coefs),type="l")
coefs = c(0.0456 ,0.0357 ,0.0138 ,0.0105 ,0.0055 ,-0.0003,0.0052 ,0.0029 ,0.0008 ,-0.0002,0.0011 ,0.0027 ,0.0025 ,-0.0003,-0.0001,0.0026 ,0.0013 ,0.0009 ,0.0009 )
plot(coefs,type="l")
plot(coefs,type="b")
library(sm)
sm.regression(coef())
sm.regression(coefs)
sm.regression(1:19,coefs)
est = sm.regression(1:19,coefs)
plot(est$eval.points,log(est$estimate),type="l")
grid()
est$eval.points
est$eval.points[26]
est$eval.points[25]
(est$estimate[26]-est$estimate[1])/10
exp((est$estimate[26]-est$estimate[1])/10)
kmArLago = 280
kmLagoCampo = 50
kmCampoRoseto = 100
kmRosetoAr = 300
kmTot = kmArLago + kmLagoCampo + kmCampoRoseto + kmRosetoAr
kmTot
Ltot = kmTot / 100 * Lper100Km
Lper100Km = 5.3
Ltot = kmTot / 100 * Lper100Km
Ltot
PrezzoTotKm = PrezzoL * Ltot
PrezzoL = 1.75
PrezzoTotKm = PrezzoL * Ltot
PrezzoTotKm
kmPisaMo = 166
kmTot3 = 2 * kmPisaMo
Ltot3 = kmTot3 / 100 * Lper100Km
PrezzTotkm3 = PrezzoL * Ltot3
PrezzTotkm3
AutoArLago = 10
AutoCampoRoseto = 4.30
AutoRosetoAr = 6.40
AutoTot = AutoArLago + AutoCampoRoseto + AutoRosetoAr
AutoTot
## autostrada solo noi 3 ----
AutoPisaAr = 5.40
AutoTot3 = 2 * AutoPisaAr
AutoTot3
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
source("~/Dropbox (Salvati)/timeSpaceEvolutionEcAct/municipalities/code_municipalities_estimate/SARD_estimate/src/testCreateShpVoronoi.R")
?unlist
list(1,2,3)
unlist(list(1,2,3))
unlist(list(c(1,1),2,3))
?barplot
?errorbar
??errorbar
plot(1,2)
errorbar(1,2,xErr = 0, yErr = 0.5)
library(pracma)
errorbar(1,2,xErr = 0, yErr = 0.5)
errorbar(1,2,xErr = 1, yErr = 0.5)
x <- seq(0, 2*pi, length.out = 20)
y <- sin(x)
xe <- 0.1
ye <- 0.1 * y
errorbar(x, y, xe, ye, type = "l", with = FALSE)
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
install.packages(c("datawizard", "hardhat", "parameters", "performance", "pkgdown", "RcppArmadillo", "recipes"))
library(spdep)
# Clearing the workspace
rm(list = ls())
# Loading required libraries
library(dplyr)
library(sf)
library(terra)
library(tmap)
library(blackmarbler)
library(raster)
library(exactextractr)
library(lubridate)
library(geodata)
library(readxl)
shp_ROI = gadm(country = "USA", level=0, path = tempdir())
shp_ROI
area(shp_ROI)
cellsize(shp_ROI)
cellSize(shp_ROI)
area(shp_ROI)
?area
terra::area(shp_ROI)
areas <- expanse(shp_ROI, unit="km")
areas
shp_ROI = gadm(country = "USA", level=2, path = tempdir()) %>% st_as_sf()
shp_ROI = gadm(country = "USA", level=2, path = tempdir())
areas <- expanse(shp_ROI, unit="km")
areas
sum(areas)
x = seq(from = -10, to = 10, length.out = 10000)
f <- function(x) return(exp(-x^(1.1)))
f(1)
plot(x,f(x))
f <- function(x) return(exp(-abs(x)^(1.1)))
plot(x,f(x))
plot(x,f(x),type="l")
fPrime <- function(x) return(-abs(x)^(0.1)*exp(abs(x)^(1.1)))
lines(x,fPrime(x),col="red")
fPrime <- function(x) return(-abs(x)^(0.1)*exp(abs(x)^(1.1)))
lines(x,fPrime(x),col="red")
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
library(ggplot2)
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
x = runif(10)
y = runif(10)
# plot x vs y using ggplot2
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
p
# plot x vs y using ggplot2 connecting with lines
p = ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) + geom_line()
p
# now add uniform shading around the line
p + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
# add also x marker in the points
p + geom_point() + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
# make the markers asterisks
p + geom_point(shape = 8) + geom_ribbon(aes(ymin = y - 0.1, ymax = y + 0.1), alpha = 0.5)
\clear
install.packages("chattr")
# Run the app
chattr::chattr_app()
chattr::chattr_app()
chattr::chattr_app()
install.packages("chattr")
# Run the app
chattr::chattr_app()
chattr::chattr_use("copilot")
chattr:::chattr_app()
chattr:::chattr_app()
set.seed(123)
x <- rnorm(100)
y <- rnorm(100)
# now plot
library(ggplot2)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point()
chattr:::chattr_app()
# now let's add a line to the plot
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_abline(intercept=0, slope=1, color="red")
chattr:::chattr_app()
chattr:::chattr_app()
chattr:::chattr_app()
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
= 1.5*x + rnorm(100)
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
= 1.5*x + rnorm(100)
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
z = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
chattr:::chattr_app()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
y = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
# Loading necessary libraries
library(tidyverse)
# Generating random example data
set.seed(123)
data <- tibble(
x = rnorm(100),
z = 1.5*x + rnorm(100)
)
# Plotting the data
data %>%
ggplot(aes(x = x, y = z)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
data %>%
ggplot(aes(x = x, y = z)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
chattr:::chattr_app()
x = rnorm(100)
y = 0.5*x+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
library(ggplot2)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm")
y = 0.5*x-0.2*x^2+0.1*rnorm(100)
# plot x vs y using ggplot2 and add regression line
ggplot(data.frame(x=x,y=y),aes(x=x,y=y)) + geom_point() + geom_smooth(method="lm",se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=FALSE)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y~poly(x, 2, raw=TRUE), se=TRUE)
# draw the plot with regression parabola using ggplot2
# draw the plot with regression parabola using ggplot2
library(ggplot2)
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=FALSE)
# with confidence bands
ggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +
geom_point() +
geom_smooth(method="lm", formula=y ~ poly(x, 2), se=TRUE)
chattr:::chattr_app()
detach("package:terra", unload = TRUE)
detach("package:geodata", unload = TRUE)
vkldsjaf
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE)
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 10, 0.1)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
# simulate one d data with quadratic term and noise
set.seed(123)
x <- seq(0, 1, 0.01)
y <- 2*x^2 + rnorm(length(x), 0, 1)
# plot regression line using ggplot2 width confidence bands
library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
theme_minimal()
TRUE || FALSE
TRUE || TRUE
TRUE & FALSE
# perform linear regression of a parbola
# generate points and do the regression in R
X = rnorm(100)
Y = 2*X^2 + rnorm(100)
# do the regression
fit = lm(Y~X+I(X^2))
# plot using ggplot
library(ggplot2)
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=FALSE) + theme_minimal()
# add confidence bands
ggplot(data.frame(X,Y), aes(x=X, y=Y)) + geom_point() + geom_smooth(method="lm", formula=y~x+I(x^2), se=TRUE) + theme_minimal()
# Clear workspace and load dependencies
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
# Clear workspace and load dependencies
setwd("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/")
rm(list = ls())
DEBUG = TRUE
source("src/libs/loadLib.R")
library(fields)
library(latex2exp)
# parameters ----
nObs = 10000
nEval = 10000
# data Generation ----
X0 = mvrnorm(nObs, mu=c(0,0),Sigma = 0.75*diag(2))
# apply VF
set.seed(1)
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# example 1 - double well ----
VF <- function(X){
# X = (x,y)
# U(X) = x^4 - x^2 + y^2
# VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
return( -0.1*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
}
# apply VF
set.seed(1)
X1 = X0 + t(apply(X0, 1, VF)) +  matrix(rnorm(2*nObs),nrow=nObs) %*% matrix(c(0.01,0.005,0.005,0.02),nrow=2)
# eval points
xGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
yGrid = seq(from=-1, to=1, length.out=round(sqrt(nEval)))
# xGrid = seq(from=min(c(X0[,1],X1[,1])), to=max(c(X0[,1],X1[,1])), length.out=round(sqrt(nEval)))
# yGrid = seq(from=min(c(X0[,2],X1[,2])), to=max(c(X0[,2],X1[,2])), length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid, yGrid))
# stima ----
t0 = Sys.time()
est_field_adaptive = LLfieldAdaptive(X0, X1, x=x, kernel.type="epa",method.h = "sj",
chunk_size=1000,
sparse=FALSE, gc=TRUE)
# est_field_adaptive = NWfieldAdaptive(X0, X1, x=x, kernel.type="gauss",method.h = "sj",
#                                      chunk_size=1000,
#                                      sparse=FALSE, gc=TRUE, alpha=0.5)
# est = est_field_adaptive
t = Sys.time() - t0
# stima VAR ----
data = data.frame(X0 = X0[,1], Y0 = X0[,2], X1 = X1[,1], Y1 = X1[,2])
lm1 = lm(X1 ~ X0 + Y0 + 0, data = data)
lm2 = lm(Y1 ~ X0 + Y0 + 0, data = data)
A = matrix(c(coef(lm1)[1:2],coef(lm2)[1:2]),nrow=2,byrow=TRUE)
VFVAR = function(x){
return((A-diag(2)) %*% x)
}
VFVARx = t(apply(x, 1, VFVAR))
## image errore relativo ----
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
VFx = t(apply(x, 1, VF))
errorNormRel = sqrt((VFVARx[,1] - VFx[,1])^2 + (VFVARx[,2] - VFx[,2])^2)/sqrt(VFx[,1]^2 + VFx[,2]^2)
image.plot(x = unique(x[,1]), y = unique(x[,2]), z = matrix(log10(errorNormRel), nrow=sqrt(nEval), ncol=sqrt(nEval)),xlab=TeX(r'($X_1$)'),ylab=TeX(r'($X_2$)'),main="")
abline(h=0)
abline(v=0)
VFVAR = function(x){
return(t(A-diag(2)) %*% x)
}
VFVARx = t(apply(x, 1, VFVAR))
dev.new()
op <- par(family = "mono") #Possible families: "mono", "Helvetica","Palatino" or "Times"
VFx = t(apply(x, 1, VF))
errorNormRel = sqrt((VFVARx[,1] - VFx[,1])^2 + (VFVARx[,2] - VFx[,2])^2)/sqrt(VFx[,1]^2 + VFx[,2]^2)
image.plot(x = unique(x[,1]), y = unique(x[,2]), z = matrix(log10(errorNormRel), nrow=sqrt(nEval), ncol=sqrt(nEval)),xlab=TeX(r'($X_1$)'),ylab=TeX(r'($X_2$)'),main="")
abline(h=0)
abline(v=0)
