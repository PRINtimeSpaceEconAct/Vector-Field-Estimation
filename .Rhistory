dim(X)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# The estimate of a nonparametric panel with time and fixed effects
#
# Update: May 3, 2025
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#############
# TODO
# 1) the case of dimension 2
rm(list = ls())
library(sm)
library(MASS)
library(Matrix)
#set.seed(124)
#Setting of the analysis
using.distance.obs <- TRUE
numericalOptimizationProcedure <- FALSE
# parameters #####
N = 100
T = 10
# data Generation ####
set.seed(1)
# genero i FE ####
alpha_i = mvrnorm(N,mu=c(0,0),Sigma=0.01*diag(2))
alpha_i[,1] = alpha_i[,1] - sum(alpha_i[,1])/N
alpha_i[,2] = alpha_i[,2] - sum(alpha_i[,2])/N
# genero i TE ####
gamma_t = mvrnorm(T,mu=c(0,0),Sigma=0.01*diag(2))
gamma_t[,1] = gamma_t[,1] - sum(gamma_t[,1])/T
gamma_t[,2] = gamma_t[,2] - sum(gamma_t[,2])/T
X0 = mvrnorm(N, mu=c(0,0),Sigma = 0.25*diag(2)) + alpha_i + array(rep(gamma_t[1,],each=N),dim=c(N,2))
X = array(NA,dim = c(N,2,T+1))
X[,,1] = X0
# example 1 - double well ----
VF <- function(X){
# X = (x,y)
# U(X) = x^4 - x^2 + y^2
# VF(X) = -grad U(X) = -(4x^3 - 2x, 2y)
return( -0.01*c(4*X[1]^3 - 2*X[1], 2*X[2]) )
}
# example 2 -- single well ----
# VF <- function(X){
#     # X = (x,y)
#     # U(X) = x^2 + y^2
#     # VF(X) = -grad U(X) = -(2x, 2y)
#     return( -0.1*c(2*X[1], 2*X[2]) )
# }
# example 3 -- rotation ----
# M = matrix(c(cos(pi/2), -sin(pi/2), sin(pi/2), cos(pi/2)),nrow=2,ncol=2)
# VF <- function(X){
#     # X = (x,y), theta = pi/4
#     return (0.1*(M %*% X - X))
# }
for (t in 1:T){
X[,,t+1] = X[,,t] + t(apply(X[,,t], 1, VF)) + alpha_i + array(rep(gamma_t[t,],each=N),dim=c(N,2)) +
+ mvrnorm(N, mu=c(0,0),Sigma = 0.001*diag(2))
}
# calcolo i Delta
Delta = (X[,,2:(T+1)] - X[,,1:T])
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#One dimensional case #####
y.matrix <- Delta[,1,]
dim(y.matrix)
x.matrix <- X[,1,1:T]
dim(x.matrix)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Estimate of FE via C-estimator ####
diff.y.array <- array(NA,dim=c(N,T))
diff.x.array  <- array(NA,dim=c(N,T))
diff.FE.array <- array(0,dim=c(N,N,T))
for (j in (1:T)){
for (i in (1:N)){
#Distance between xs
diff.x <- abs(x.matrix[i,j]-x.matrix[,j])
#Set the distance with itself to the maximum
diff.x[i] <- max(diff.x)
#Take the x with the minimum distance
min.index <- which.min(diff.x)
#Record the distance between xs
diff.x.array[i,j] <- diff.x[min.index]
#Record the distance between ys
diff.y.array[i,j] <- y.matrix[i,j]- y.matrix[min.index,j]
#Set the array for FE estimation
diff.FE.array[i,i,j] <- 1
diff.FE.array[i,min.index,j] <- -1
}
}
#Stacking of all variables
delta.y.stacked <-  c(diff.y.array)
delta.x.stacked <-  c(diff.x.array)
delta.FE.stacked <- do.call(rbind, lapply(1:T,function(t) diff.FE.array[ , ,t] ))
#Numerical optimization
score <- function(FE.vec,A,delta.Y){
sum( (delta.Y - A%*%FE.vec)^2 )
}
## Initial values of FE estimation ####
FE.ini <- matrix(0,nrow=N,ncol=1)
numericalOptimizationProcedure
#Using the generalized inverse matrix
FE.star <- (ginv(t(delta.FE.stacked)%*%delta.FE.stacked))%*%t(delta.FE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
FE.star
## Diagnostics of estimates ####
#Sum of FE
print(c(sum(FE),sum(est.FE),sum(FE.star),sum(FE.star_reg))) #Sum of FE
sum(FE)
alpha_i
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
## Diagnostics of estimates ####
#Sum of FE
print(c(sum(FE),sum(est.FE),sum(FE.star),sum(FE.star_reg))) #Sum of FE
sum(est.FE)
est.FE
delta.y.stacked
delta.x.stacked
delta.FE.stacked
#Numerical optimization
score <- function(FE.vec,A,delta.Y){
sum( (delta.Y - A%*%FE.vec)^2 )
}
## Initial values of FE estimation ####
FE.ini <- matrix(0,nrow=N,ncol=1)
est.FE <- NA
est.FE.one.eq <- NA
#Using the generalized inverse matrix
FE.star <- (ginv(t(delta.FE.stacked)%*%delta.FE.stacked))%*%t(delta.FE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
FE.star
# #Using a small nudge
# lambda <- 1e-6
# to.be.inverted <- t(delta.FE.stacked)%*%delta.FE.stacked
# to.be.inverted_reg <- to.be.inverted + diag(lambda, nrow(to.be.inverted))
# inv_delta.FE.stacked_reg <- solve(to.be.inverted_reg)
# FE.star_reg <- inv_delta.FE.stacked_reg%*%t(delta.FE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
FE.star_reg <- NA
## Diagnostics of estimates ####
#Sum of FE
print(c(sum(FE),sum(est.FE),sum(FE.star),sum(FE.star_reg))) #Sum of FE
#MSE
print( c(mean((FE-est.FE)^2), mean((FE-FE.star)^2),mean((FE-FE.star_reg)^2)) ) # MSE
est.FE
FE.star
FE.star_reg
c(mean((FE-est.FE)^2), mean((FE-FE.star)^2),mean((FE-FE.star_reg)^2))
mean((FE-est.FE)^2)
mean((FE-FE.star)^2)
FE.star
FE
FE[,1]
#MSE
print( c(mean((FE-est.FE)^2), mean((FE[,1]-FE.star)^2),mean((FE-FE.star_reg)^2)) ) # MSE
TE
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
sm.density(c(diff.x.TS.array/diff.x.CS.array),model="Normal")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_III.R")
#Nonparametric function
m_x <- function(x) {
1/(1+exp(-x))
}
#Setting of the analysis
using.distance.obs <- TRUE
numericalOptimizationProcedure <- FALSE
# parameters #####
N = 100
T = 10
u <- rnorm(N*T,0,1)
u <- matrix(rnorm(N*T,0,1),nrow=N,ncol=T)
##  X #####
X <- matrix(rnorm(N*T,2,4^2),nrow=N,ncol=T)
## X #####
X <- matrix(rnorm(N*T,2,4^2),nrow=N,ncol=T)
## FE ####
v <- runif(N,min=-0.5,max=0.5)
dim(X)
rowMeans(X)
FE <- 0.5*rowMeans(X)+v
FE
sum(FE)
mean(FE)
FE <- FE - mean(FE)
FE
sum(FE)
# TE ####
TE = rnorm(T,0,1)
TE
# TE ####
TE <- rnorm(T,0,1)
sum(TE)
TE <- TE - mean(TE)
TE
sum(TE)
m(X)
m_x(X)
dim(m_x(X))
matrix(FE,nrow=N,ncol=T)
matrix(TE,nrow=N,ncol=T,byrow=T)
dim(u)
## y
y <- m_x(X) + matrix(FE,nrow=N,ncol=T) + matrix(TE,nrow=N,ncol=T,byrow=T) + u
y
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#One dimensional case #####
y.matrix <- y
dim(y.matrix)
x.matrix <- X
dim(x.matrix)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Estimate of FE via C-estimator ####
diff.y.array <- array(NA,dim=c(N,T))
diff.x.array  <- array(NA,dim=c(N,T))
diff.FE.array <- array(0,dim=c(N,N,T))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
load(stats)
package(stats)
packages(stats)
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
plot(cars.lo)
data(geyser, package = "MASS")
x <- geyser$duration
est <- locpoly(x, bandwidth = 0.25)
library(KernSmooth)
data(geyser, package = "MASS")
x <- geyser$duration
est <- locpoly(x, bandwidth = 0.25)
y <- geyser$waiting
plot(x, y)
fit <- locpoly(x, y, bandwidth = 0.25)
lines(fit)
#Sum of FE
print(rbind(
#c(sum(FE),sum(TE)),
#c(sum(est.FE.TE[1:N]),sum(est.FE.TE[(N+1):(T+N)])),
c(sum(FE.TE.star[1:N]),sum(FE.TE.star[(N+1):(T+N)])),
c(sum(FE.TE.star_reg[1:N]),sum(FE.TE.star_reg[(N+1):(T+N)]))
)
)
#MSE
print( c(mean((FE-est.FE.TE[1:N])^2), mean((FE-FE.TE.star[1:N])^2),mean((FE-FE.TE.star_reg[1:N])^2)) )
print( c(mean((TE-est.FE.TE[(N+1):(T+N)])^2), mean((TE-FE.TE.star[(N+1):(T+N)])^2),mean((TE-FE.TE.star_reg[(N+1):(T+N)])^2)) )
#Explained variance of FE and TE estimation
est.FE.star <- lm(FE  ~ I(FE.TE.star[1:N]) )
#est.FE.star_reg <- lm(FE  ~ I(FE.TE.star_reg[1:N]) )
est.TE.star <- lm(TE  ~ I(FE.TE.star[(N+1):(T+N)]) )
#Plot of the estimated FE
plot(FE.TE.star[1:N],FE,pch=19,ylim=range(c(FE,est.FE.TE[1:N],FE.TE.star[1:N],FE.TE.star_reg[1:N]),na.rm = T),xlim=range(c(TE,est.FE.TE[1:N],FE.TE.star[1:N],FE.TE.star_reg[1:N]),na.rm = T),cex=0.75)
#points(FE.TE[1:N],FE,col="green",pch=19)
#points(FE.TE.star_reg[1:N],FE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
grid()
plot(FE.TE.star[(N+1):(T+N)],TE,pch=19,ylim=range(c(TE,est.FE.TE[(N+1):(T+N)],FE.TE.star[(N+1):(T+N)],FE.TE.star_reg[(N+1):(T+N)]),na.rm=T),xlim=range(c(TE,est.FE.TE[(N+1):(T+N)],FE.TE.star[(N+1):(T+N)],FE.TE.star_reg[(N+1):(T+N)]),na.rm=T),cex=0.75)
#points(FE.TE[(N+1):(T+N)],TE,col="green",pch=19)
#points(FE.TE.star_reg[(N+1):(T+N)],TE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
grid()
## Plot of the estimated TE ####
plot(TE.star,TE,pch=19,ylim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),xlim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),cex=0.75)
## Plot of the estimated FE ####
plot(FE.star,FE,pch=19,ylim=range(c(FE,est.FE,FE.star,FE.star_reg),na.rm = T),xlim=range(c(FE,est.FE,FE.star,FE.star_reg),na.rm = T),cex=0.75)
#points(FE,FE,col="green",pch=19)
#points(FE.star_reg,FE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Estimate of FE via C-estimator ####
diff.y.array <- array(NA,dim=c(N,T))
diff.x.array  <- array(NA,dim=c(N,T))
diff.FE.array <- array(0,dim=c(N,N,T))
for (j in (1:T)){
for (i in (1:N)){
#Distance between xs
diff.x <- abs(x.matrix[i,j]-x.matrix[,j])
#Set the distance with itself to the maximum
diff.x[i] <- max(diff.x)
#Take the x with the minimum distance
min.index <- which.min(diff.x)
#Record the distance between xs
diff.x.array[i,j] <- diff.x[min.index]
#Record the distance between ys
diff.y.array[i,j] <- y.matrix[i,j]- y.matrix[min.index,j]
#Set the array for FE estimation
diff.FE.array[i,i,j] <- 1
diff.FE.array[i,min.index,j] <- -1
}
}
#Stacking of all variables
delta.y.stacked <-  c(diff.y.array)
delta.x.stacked <-  c(diff.x.array)
delta.FE.stacked <- do.call(rbind, lapply(1:T,function(t) diff.FE.array[ , ,t] ))
#Numerical optimization
score <- function(FE.vec,A,delta.Y){
sum( (delta.Y - A%*%FE.vec)^2 )
}
## Initial values of FE estimation ####
FE.ini <- matrix(0,nrow=N,ncol=1)
if (numericalOptimizationProcedure==TRUE){
t0 <- Sys.time()
res <- optim(par = FE.ini, fn = score,A=delta.FE.stacked, delta.Y=delta.y.stacked, method =  "L-BFGS-B")
print(Sys.time() - t0)
#The outcome of estimation
est.FE <- res$par
est.FE.one.eq <- lm(FE  ~ est.FE)
}else{
est.FE <- NA
est.FE.one.eq <- NA
}
#Using the generalized inverse matrix
FE.star <- (ginv(t(delta.FE.stacked)%*%delta.FE.stacked))%*%t(delta.FE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
# #Using a small nudge
# lambda <- 1e-6
# to.be.inverted <- t(delta.FE.stacked)%*%delta.FE.stacked
# to.be.inverted_reg <- to.be.inverted + diag(lambda, nrow(to.be.inverted))
# inv_delta.FE.stacked_reg <- solve(to.be.inverted_reg)
# FE.star_reg <- inv_delta.FE.stacked_reg%*%t(delta.FE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
FE.star_reg <- NA
## Diagnostics of estimates ####
#Sum of FE
print(c(sum(FE),sum(est.FE),sum(FE.star),sum(FE.star_reg))) #Sum of FE
#MSE
print( c(mean((FE-est.FE)^2), mean((FE-FE.star)^2),mean((FE-FE.star_reg)^2)) ) # MSE
## Diagnostics of estimates ####
#Sum of FE
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@",quote=FALSE)
print("",quote=FALSE)
print("Estimation of FE alone via C-estimator")
print(c(sum(FE),sum(est.FE),sum(FE.star),sum(FE.star_reg)),quote=FALSE) #Sum of FE
## Plot of the estimated FE ####
plot(FE.star,FE,pch=19,ylim=range(c(FE,est.FE,FE.star,FE.star_reg),na.rm = T),xlim=range(c(FE,est.FE,FE.star,FE.star_reg),na.rm = T),cex=0.75,main="FE alone")
#points(FE,FE,col="green",pch=19)
#points(FE.star_reg,FE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
grid()
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Estimate of TE via C-estimator ####
diff.y.array <- array(NA,dim=c(N,T))
diff.x.array  <- array(NA,dim=c(N,T))
diff.TE.array <- array(0,dim=c(N,T,T))
## Initial values of FE estimation ####
TE.ini <- matrix(0,nrow=T,ncol=1)
#Using the generalized inverse matrix
TE.star <- (ginv(t(delta.TE.stacked)%*%delta.TE.stacked))%*%t(delta.TE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
# #Using a small nudge
# lambda <- 1e-6
# to.be.inverted <- t(delta.TE.stacked)%*%delta.TE.stacked
# to.be.inverted_reg <- to.be.inverted + diag(lambda, nrow(to.be.inverted))
# inv_delta.TE.stacked_reg <- solve(to.be.inverted_reg)
# TE.star_reg <- inv_delta.TE.stacked_reg%*%t(delta.TE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
TE.star_reg <- NA
## Plot of the estimated TE ####
plot(TE.star,TE,pch=19,ylim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),xlim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),cex=0.75,main="TE alone")
#points(TE,TE,col="green",pch=19)
#points(TE.star_reg,TE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Estimate of TE via C-estimator ####
diff.y.array <- array(NA,dim=c(N,T))
diff.x.array  <- array(NA,dim=c(N,T))
diff.TE.array <- array(0,dim=c(N,T,T))
for (j in (1:T)){
for (i in (1:N)){
#Distance between xs
diff.x <- abs(x.matrix[i,j]-x.matrix[i,])
#Set the distance with itself to the maximum
diff.x[j] <- max(diff.x)
#Take the x with the minimum distance
min.index <- which.min(diff.x)
#Record the distance between xs
diff.x.array[i,j] <- diff.x[min.index]
#Record the distance between ys
diff.y.array[i,j] <- y.matrix[i,j]- y.matrix[i,min.index]
#Set the array for TE estimation
diff.TE.array[i,j,j] <- 1
diff.TE.array[i,min.index,j] <- -1
}
}
#Stacking of all variables
delta.y.stacked <-  c(diff.y.array)
delta.x.stacked <-  c(diff.x.array)
delta.TE.stacked <- do.call(rbind, lapply(1:T,function(t) diff.TE.array[ , ,t] ))
#Numerical optimization
score <- function(TE.vec,B,delta.Y){
sum( (delta.Y - B%*%TE.vec)^2 )
}
## Initial values of FE estimation ####
TE.ini <- matrix(0,nrow=T,ncol=1)
if (numericalOptimizationProcedure==TRUE){
t0 <- Sys.time()
res <- optim(par = TE.ini, fn = score,B=delta.TE.stacked, delta.Y=delta.y.stacked, method =  "L-BFGS-B")
print(Sys.time() - t0)
#The outcome of estimation
est.TE <- res$par
est.TE.one.eq <- lm(TE  ~ est.TE)
}else{
est.TE <- NA
est.TE.one.eq <- NA
}
#Using the generalized inverse matrix
TE.star <- (ginv(t(delta.TE.stacked)%*%delta.TE.stacked))%*%t(delta.TE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
# #Using a small nudge
# lambda <- 1e-6
# to.be.inverted <- t(delta.TE.stacked)%*%delta.TE.stacked
# to.be.inverted_reg <- to.be.inverted + diag(lambda, nrow(to.be.inverted))
# inv_delta.TE.stacked_reg <- solve(to.be.inverted_reg)
# TE.star_reg <- inv_delta.TE.stacked_reg%*%t(delta.TE.stacked)%*%matrix(delta.y.stacked,nrow=N*T,ncol=1)
TE.star_reg <- NA
## Diagnostics of estimates ####
#Sum of TE
print("@@@@@@@@@@@@@@@@@@@@@@@@@@@",quote=FALSE)
print("",quote=FALSE)
print("Estimation of TE alone via C-estimator")
print("Sum")
print(c(sum(TE),sum(est.TE),sum(TE.star),sum(TE.star_reg)))
#MSE
print("MSE")
print( c(mean((TE-est.TE)^2), mean((TE-TE.star)^2),mean((TE-TE.star_reg)^2)) )
#Explained variance of FE estimation
est.TE.star.one.eq <- lm(TE  ~ TE.star)
#est.TE.star_reg.one.eq <- lm(TE  ~ TE.star_reg )
#print(summary(lm(TE  ~ est.TE)))
#print(summary(lm(TE  ~ TE.star)))
#print(summary(lm(TE  ~ TE.star_reg )))
## Plot of the estimated TE ####
plot(TE.star,TE,pch=19,ylim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),xlim=range(c(TE,est.TE,TE.star,TE.star_reg),na.rm = T),cex=0.75,main="TE alone")
#points(TE,TE,col="green",pch=19)
#points(TE.star_reg,TE,col="red",pch=19)
lines(c(-10,10),c(-10,10))
grid()
print("Solving the system of equations")
print(
cbind(coef(est.FE.star.one.eq),coef(est.TE.star.one.eq),
coef(est.FE.star),coef(est.TE.star)
)
)
print(c(median(diff.x.CS.array),median(diff.x.TS.array)))
print(median(c(diff.x.CS.array/diff.x.TS.array)))
print(c(sd(diff.x.CS.array),sd(diff.x.TS.array)))
print(cor(c(diff.x.CS.array),c(diff.x.TS.array)))
print(c(var(c(diff.x.CS.array)),var(c(diff.x.TS.array))))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
est.FE.star
y_filtered <- y - matrix(FE.TE.star[1:N],nrow=N,ncol=T) - matrix(FE.TE.star[(N+1):(T+N)],nrow=N,ncol=T,byrow=T)
plot(c(X),c(y_filtered))
plot(c(X),c(y_filtered),pch=19,cex=0.25)
fit <- locpoly(c(y_filtered), c(X), bandwidth = 0.25)
lines(fit)
fit <- locpoly(c(y_filtered), c(X), bandwidth = 0.15)
lines(fit)
fit <- locpoly(c(y_filtered), c(X), bandwidth = 0.5)
lines(fit)
y_filtered <- y - matrix(FE.TE.star[1:N],nrow=N,ncol=T) - matrix(FE.TE.star[(N+1):(T+N)],nrow=N,ncol=T,byrow=T)
plot(c(X),c(y_filtered),pch=19,cex=0.25)
fit <- locpoly(c(y_filtered), c(X), bandwidth = 0.5)
lines(fit)
curve(m_x,from=-40,to=40,add=TRUE,col="red")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
dim(X)
apply(X,FUN=se,MARGIN=1)
apply(X,FUN=sd,MARGIN=1)
apply(X,FUN=sd,MARGIN=2)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
dim(y)
apply(y,FUN=sd,MARGIN=2)
apply(y,FUN=sd,MARGIN=1)
mean(apply(y,FUN=sd,MARGIN=1))
mean(apply(y,FUN=sd,MARGIN=2))
apply(y,FUN=sd,MARGIN=2)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
mean(apply(y,FUN=sd,MARGIN=1))
mean(apply(y,FUN=sd,MARGIN=2))
apply(y,FUN=sd,MARGIN=1)
apply(y,FUN=sd,MARGIN=2)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/Cristiano Ricci's files - timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/nonparametricPanel_version_IV.R")
