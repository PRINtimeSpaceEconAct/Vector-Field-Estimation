MEval2 = matrix(rep(x[,2],nObs),nObs,nEval,byrow=TRUE)
MObs1
MEval1
x
z1 = MEval1 - MObs1
z2 = MEval2 - MObs2
z1
X[5]-x[2]
a = 1
b = 2
x = list(a,b)
x
x = list(a=a,b=b)
x
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/utils.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/distances.R", echo=TRUE)
X
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernels.R", echo=TRUE)
epaKernel(X)
X = as(X,"sparseMatrix")
X
epaKernel(X)
gc()
if (a = 1){}
if (a = 1){print("culo")}
View(MEval1)
nObs = 100000
nEval = 2500
X = matrix(nrow=nObs,runif(2*nObs))
x = matrix(nrow=nEval,runif(2*nEval))
2*nObs*8
2*nObs*8/1e6
D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=TRUE)
source("utils.R")
source("distances.R")
source("kernels.R")
D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=TRUE)
D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=FALSE)
gc()
D$z1
D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=FALSE)
class(D$z1)
dim(D$z1)
prod(dim(D$z1))*8
prod(dim(D$z1))*8/1e9
gc()
M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
M
gc()
M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/distances.R", echo=TRUE)
gc()
M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/distances.R", echo=TRUE)
M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/distances.R", echo=TRUE)
epaKernel(M)
s = epaKernel(M)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernels.R", echo=TRUE)
s = epaKernel(M)
X
dim(X)
cov(X)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernels.R", echo=TRUE)
gaussKernel(M)
s = gaussKernel(M)
?bw.SJ()
bw.SJ(X)
isj
??isj
library(MAS)
library(MASS)
??isj
?bw.sj
??bw.sj
btoev
botev
??botev
library(provenance)
??botev
?bw.optim()
?bw
?bw.SJ()
bw.SJ(X)
dim(K)
dim(M)
rowSums(M)
rowsum(M)
K = epaKernel(M)
rowSums(K)
rowSum(M)
rowsum(M)
rowsums(M)
rowSums(M)
rowSums(K)
dim(M)
dim(K)
M
dim(M)
K
dim(K)
K = gaussKernel(M)
dim(K)
1 <= 0.5
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/kernels.R", echo=TRUE)
if (kernel == "epa"){ K = epaKernel(M) }
K = epaKernel(M)
dim(K)
rowSums(K)
K
dim(K)
a= matrix(c(1,2,3,4),nrow=2)
a
rowSums(a)
colSums(K)
edit(bw.SJ)
edit(bw.bw_pair_cnts)
edit(bw.SJ)
edit(bw_pair_cnts)
??expand.grid
expand.grid(c(1,2,3),(4,5))
expand.grid(c(1,2,3),c(4,5))
matrix(expand.grid(c(1,2,3),c(4,5)))
as.matrix(expand.grid(c(1,2,3),c(4,5)))
sqrt(3,Int)
?sqrt
round(sqrt(3))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
source("loadLib.R")
nObs = 100000
nEval = 2500
X = matrix(nrow=nObs,runif(2*nObs))
rm(list = ls())
source("loadLib.R")
nObs = 100000
nEval = 2500
X = matrix(nrow=nObs,runif(2*nObs))
est = densityEst2d(X,nEval=2500)
source("density.R")
est = densityEst2d(X,nEval=2500)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,nEval=2500)
est = densityEst2d(X,nEval=2500,gc=TRUE)
est$x
est$densityEst
?contour
library(plotly)
est$x
gc()
est$x
size(est$x)
View(est)
rm(X)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/main.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/distances.R", echo=TRUE)
nObs = 100000
X = matrix(nrow=nObs,runif(2*nObs))
est = densityEst2d(X,nEval=2500,gc=TRUE)
rm(X)
rm(list(X,nObs))
rm(c("X","nObs"))
rm("X","nObs")
rm(list("X","nObs"))
ls()
class(ls())
rm(list = c("X","nObs"))
nObs = 100000
X = matrix(nrow=nObs,runif(2*nObs))
rm(list = c("X","nObs"))
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,runif(2*nObs))
# nEval = 2500
# x = matrix(nrow=nEval,runif(2*nEval))
# D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=FALSE)
# M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
# s = epaKernel(M)
est = densityEst2d(X,nEval=2500,gc=TRUE)
gc()
est
x
estÂ£x
est$x
?contour
fig <- plot_ly(x = est$x[,1], y = est$x[,2], z = est$densityEst) %>% add_surface()
fig
est$densityEst
scatterplot3d
??scatterplot3d
library(scatterplot3d)
scatterplot3d(est$x[,1],est$x[,2],est$densityEst)
x = est$x[,1]
y = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
fig_scatter <- plot_ly(
x = x,
y = x,
z = z,
type = "scatter3d",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
x
dim(x)
x
class(x)
x
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
fig_scatter <- plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "scatter3d",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
fig_scatter <- plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "surface",
mode = "markers",
marker = list(
size = 3,
color = z,
colorscale = 'Viridis',
showscale = TRUE
)
) %>%
layout(
title = "3D Scatter Plot",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
# Display the scatter plot
fig_scatter
plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "surface",
)
plot_ly(
x = xCoord,
y = yCoord,
z = z,
type = "mesh3d"
)
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
X = matrix(nrow=nObs,rnorm(2*nObs))
# nEval = 2500
# x = matrix(nrow=nEval,runif(2*nEval))
# D = computeDcomponents(X,x,A=NULL,dMax=0,sparse=FALSE)
# M = mahalanobis(D$z1,D$z2,A=matrix(c(1,0,0,1),2,2),den=rep(1,nObs))
# s = epaKernel(M)
est = densityEst2d(X,nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "contour")
est = densityEst2d(X,kernel = "gauss",nEval=2500,gc=TRUE)
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "contour")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z,type = "mesh3d")
# Create a 3D scatter plot
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
sm.density()
?sm.density()
est.sm = sm.density(X)
est.sm$h
bw.nrd(X)
bw.nrd0(X)
sm.density()
?sm.density()
edit(sm.densty)
edit(sm.density)
?h.select()
h.select(X)
bw.nrd0(t(X))
bw.nrd0(X)
edit(sm.density)
edit(sm.density.2d)
sm.density.2d
sm::sm.density.2d
edit(sm.density.2d)
1.77*nrow(x)^(-1/6)
1.77*nrow(X)^(-1/6)
bw.nrd0(X)
?bw.nrd0
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,kernel = "gauss", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est = densityEst2d(X,kernel = "botev", nEval=2500,gc=TRUE)
est = densityEst2d(X,kernel = "gauss", method.h = "botev", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
botev
est = densityEst2d(X,kernel = "gauss", method.h = "botev", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est = densityEst2d(X,kernel = "gauss", method.h = "sj", nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=0.1)
?sm.densitty
?sm.density
est.sm = sm.density(X,h=c(0.1,0.1)
est.sm = sm.density(X,h=c(0.1,0.1))
est = densityEst2d(X,kernel = "gauss", h = 0.1, nEval=2500,gc=TRUE)
NULL == "silverman"
0+(NULL == "silverman")
1+(NULL == "silverman")
source("~/Library/CloudStorage/OneDrive-UniversityofPisa/timeSpaceEvolutionEcAct/RVF/R code/Vector Field Estimation/src/libs/density.R", echo=TRUE)
est = densityEst2d(X,kernel = "gauss", h = 0.1, nEval=2500,gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
?sm.density()
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
est = densityEst2d(X,x,kernel = "gauss", h = 0.1, gc=TRUE)
est.sm = sm.density(x,X,h=c(0.1,0.1))
est.sm = sm.density(x=x,X,h=c(0.1,0.1))
est.sm = sm.density(X,h=c(0.1,0.1))
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = list(x = xCoordm,y = yCoord))
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = list(x = xCoord,y = yCoord))
x <- rnorm(100)
y <- rnorm(100)
# Create a grid of evaluation points
x_points <- seq(-3, 3, length.out = 50)
y_points <- seq(-3, 3, length.out = 50)
grid <- list(x = x_points, y = y_points)
# 2D density estimation at specified points
result <- sm.density(cbind(x, y), eval.points = grid)
edit(sm.density)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
X
dim(X)
dim(x)
x = as.matrix(expand.grid(xGrid,yGrid))
dim(x)
est = densityEst2d(X,x,kernel = "gauss", h = 0.1, gc=TRUE)
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
dim(x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x)
dim(x)
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x,eval.grid=FALSE)
est.sm$eval.points
est.sm$eval.points-x
est.sm
est.sm$estimate
class(est.sm$estimate)
est.sm$estimate-est$densityEst
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
est.sm = sm.density(X,h=c(0.1,0.1),eval.points = x,eval.grid=FALSE,nbins=0)
z = est.sm$estimate-est$densityEst
z
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
system.time
system.time(a =1)
?system.time
Sys.time()
system.time()
system.time(expr("a =- 1"))
system.time(expr('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)'))
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(expr('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)'))
system.time('est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE)')
system.time(est = densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
system.time(a=1)
system.time(a=rand(2))
system.time(rand(2))
system.time(runif(2))
system.time(a<-runif(2))
system.time(a=runif(2))
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est <- densityEst2d(X,x,kernel = "gauss", h = 0.2, gc=TRUE))
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
system.time(est.sm <- sm.density(X,h=c(0.2,0.2),eval.points = x,eval.grid=FALSE,nbins=0))
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
?sm.density
rm(list = ls())
source("loadLib.R")
nObs = 100000
X = matrix(nrow=nObs,rnorm(2*nObs))
nEval = 2500
xGrid = seq(from=min(X[,1]),to=max(X[,1]),length.out=round(sqrt(nEval)))
yGrid = seq(from=min(X[,2]),to=max(X[,2]),length.out=round(sqrt(nEval)))
x = as.matrix(expand.grid(xGrid,yGrid))
system.time(est <- densityEst2d(X,x,kernel = "gauss", h = 0.05, gc=TRUE))
# Create a 3D scatter plot
xCoord = est$x[,1]
yCoord = est$x[,2]
z = est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
library(sm)
system.time(est.sm <- sm.density(X,h=c(0.05,0.05),eval.points = x,eval.grid=FALSE,nbins=0))
z = est.sm$estimate-est$densityEst
plot_ly(x = xCoord,y = yCoord,z = z, intensity = z,type = "mesh3d")
gc()
?sm.density()
